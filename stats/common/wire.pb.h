// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wire.proto

#ifndef PROTOBUF_wire_2eproto__INCLUDED
#define PROTOBUF_wire_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace stats {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_wire_2eproto();
void protobuf_AssignDesc_wire_2eproto();
void protobuf_ShutdownFile_wire_2eproto();

class Event;
class Search;
class PinDrop;

// ===================================================================

class Event : public ::google::protobuf::MessageLite {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }

  static const Event& default_instance();

  void Swap(Event* other);

  // implements Message ----------------------------------------------

  Event* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 userId = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);

  // optional int64 timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Event)
  // @@protoc_insertion_point(class_scope:stats.Event)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::int64 userid_;
  ::google::protobuf::int64 timestamp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_wire_2eproto();
  friend void protobuf_AssignDesc_wire_2eproto();
  friend void protobuf_ShutdownFile_wire_2eproto();

  void InitAsDefaultInstance();
  static Event* default_instance_;
};
// -------------------------------------------------------------------

class Search : public ::google::protobuf::MessageLite {
 public:
  Search();
  virtual ~Search();

  Search(const Search& from);

  inline Search& operator=(const Search& from) {
    CopyFrom(from);
    return *this;
  }

  static const Search& default_instance();

  void Swap(Search* other);

  // implements Message ----------------------------------------------

  Search* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Search& from);
  void MergeFrom(const Search& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string query = 1;
  inline bool has_query() const;
  inline void clear_query();
  static const int kQueryFieldNumber = 1;
  inline const ::std::string& query() const;
  inline void set_query(const ::std::string& value);
  inline void set_query(const char* value);
  inline void set_query(const char* value, size_t size);
  inline ::std::string* mutable_query();
  inline ::std::string* release_query();
  inline void set_allocated_query(::std::string* query);

  static const int kEventFieldNumber = 100;
  static ::google::protobuf::internal::ExtensionIdentifier< ::stats::Event,
      ::google::protobuf::internal::MessageTypeTraits< ::stats::Search >, 11, false >
    event;
  // @@protoc_insertion_point(class_scope:stats.Search)
 private:
  inline void set_has_query();
  inline void clear_has_query();

  ::std::string* query_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_wire_2eproto();
  friend void protobuf_AssignDesc_wire_2eproto();
  friend void protobuf_ShutdownFile_wire_2eproto();

  void InitAsDefaultInstance();
  static Search* default_instance_;
};
// -------------------------------------------------------------------

class PinDrop : public ::google::protobuf::MessageLite {
 public:
  PinDrop();
  virtual ~PinDrop();

  PinDrop(const PinDrop& from);

  inline PinDrop& operator=(const PinDrop& from) {
    CopyFrom(from);
    return *this;
  }

  static const PinDrop& default_instance();

  void Swap(PinDrop* other);

  // implements Message ----------------------------------------------

  PinDrop* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PinDrop& from);
  void MergeFrom(const PinDrop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 latlong = 1;
  inline bool has_latlong() const;
  inline void clear_latlong();
  static const int kLatlongFieldNumber = 1;
  inline ::google::protobuf::int64 latlong() const;
  inline void set_latlong(::google::protobuf::int64 value);

  // optional string label = 2;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 2;
  inline const ::std::string& label() const;
  inline void set_label(const ::std::string& value);
  inline void set_label(const char* value);
  inline void set_label(const char* value, size_t size);
  inline ::std::string* mutable_label();
  inline ::std::string* release_label();
  inline void set_allocated_label(::std::string* label);

  static const int kEventFieldNumber = 101;
  static ::google::protobuf::internal::ExtensionIdentifier< ::stats::Event,
      ::google::protobuf::internal::MessageTypeTraits< ::stats::PinDrop >, 11, false >
    event;
  // @@protoc_insertion_point(class_scope:stats.PinDrop)
 private:
  inline void set_has_latlong();
  inline void clear_has_latlong();
  inline void set_has_label();
  inline void clear_has_label();

  ::google::protobuf::int64 latlong_;
  ::std::string* label_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_wire_2eproto();
  friend void protobuf_AssignDesc_wire_2eproto();
  friend void protobuf_ShutdownFile_wire_2eproto();

  void InitAsDefaultInstance();
  static PinDrop* default_instance_;
};
// ===================================================================


// ===================================================================

// Event

// optional int64 userId = 1;
inline bool Event::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::int64 Event::userid() const {
  return userid_;
}
inline void Event::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
}

// optional int64 timestamp = 2;
inline bool Event::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 Event::timestamp() const {
  return timestamp_;
}
inline void Event::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// -------------------------------------------------------------------

// Search

// optional string query = 1;
inline bool Search::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Search::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Search::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Search::clear_query() {
  if (query_ != &::google::protobuf::internal::kEmptyString) {
    query_->clear();
  }
  clear_has_query();
}
inline const ::std::string& Search::query() const {
  return *query_;
}
inline void Search::set_query(const ::std::string& value) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  query_->assign(value);
}
inline void Search::set_query(const char* value) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  query_->assign(value);
}
inline void Search::set_query(const char* value, size_t size) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  query_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Search::mutable_query() {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  return query_;
}
inline ::std::string* Search::release_query() {
  clear_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = query_;
    query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Search::set_allocated_query(::std::string* query) {
  if (query_ != &::google::protobuf::internal::kEmptyString) {
    delete query_;
  }
  if (query) {
    set_has_query();
    query_ = query;
  } else {
    clear_has_query();
    query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PinDrop

// optional int64 latlong = 1;
inline bool PinDrop::has_latlong() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PinDrop::set_has_latlong() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PinDrop::clear_has_latlong() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PinDrop::clear_latlong() {
  latlong_ = GOOGLE_LONGLONG(0);
  clear_has_latlong();
}
inline ::google::protobuf::int64 PinDrop::latlong() const {
  return latlong_;
}
inline void PinDrop::set_latlong(::google::protobuf::int64 value) {
  set_has_latlong();
  latlong_ = value;
}

// optional string label = 2;
inline bool PinDrop::has_label() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PinDrop::set_has_label() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PinDrop::clear_has_label() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PinDrop::clear_label() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    label_->clear();
  }
  clear_has_label();
}
inline const ::std::string& PinDrop::label() const {
  return *label_;
}
inline void PinDrop::set_label(const ::std::string& value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void PinDrop::set_label(const char* value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void PinDrop::set_label(const char* value, size_t size) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PinDrop::mutable_label() {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  return label_;
}
inline ::std::string* PinDrop::release_label() {
  clear_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = label_;
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PinDrop::set_allocated_label(::std::string* label) {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (label) {
    set_has_label();
    label_ = label;
  } else {
    clear_has_label();
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace stats

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_wire_2eproto__INCLUDED
