// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wire.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "wire.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace stats {

void protobuf_ShutdownFile_wire_2eproto() {
  delete Event::default_instance_;
  delete Search::default_instance_;
  delete PinDrop::default_instance_;
}

void protobuf_AddDesc_wire_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  Event::default_instance_ = new Event();
  Search::default_instance_ = new Search();
  PinDrop::default_instance_ = new PinDrop();
  Event::default_instance_->InitAsDefaultInstance();
  Search::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::stats::Event::default_instance(),
    100, 11, false, false,
    &::stats::Search::default_instance());
  PinDrop::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::stats::Event::default_instance(),
    101, 11, false, false,
    &::stats::PinDrop::default_instance());
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_wire_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_wire_2eproto {
  StaticDescriptorInitializer_wire_2eproto() {
    protobuf_AddDesc_wire_2eproto();
  }
} static_descriptor_initializer_wire_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Event::kUserIdFieldNumber;
const int Event::kTimestampFieldNumber;
#endif  // !_MSC_VER

Event::Event()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Event::InitAsDefaultInstance() {
}

Event::Event(const Event& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Event::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_LONGLONG(0);
  timestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event::~Event() {
  SharedDtor();
}

void Event::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Event& Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wire_2eproto();
  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New() const {
  return new Event;
}

void Event::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_LONGLONG(0);
    timestamp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag && tag < 8000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->userid(), output);
  }

  // optional int64 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // Extension range [100, 1000)
  _extensions_.SerializeWithCachedSizes(
      100, 1000, output);

}

int Event::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }

    // optional int64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

  }
  total_size += _extensions_.ByteSize();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Event*>(&from));
}

void Event::MergeFrom(const Event& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
}

void Event::CopyFrom(const Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Event::Swap(Event* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::std::string Event::GetTypeName() const {
  return "stats.Event";
}


// ===================================================================

#ifndef _MSC_VER
const int Search::kQueryFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Search::kEventFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::stats::Event,
    ::google::protobuf::internal::MessageTypeTraits< ::stats::Search >, 11, false >
  Search::event(kEventFieldNumber, ::stats::Search::default_instance());
Search::Search()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Search::InitAsDefaultInstance() {
}

Search::Search(const Search& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Search::SharedCtor() {
  _cached_size_ = 0;
  query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Search::~Search() {
  SharedDtor();
}

void Search::SharedDtor() {
  if (query_ != &::google::protobuf::internal::kEmptyString) {
    delete query_;
  }
  if (this != default_instance_) {
  }
}

void Search::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Search& Search::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wire_2eproto();
  return *default_instance_;
}

Search* Search::default_instance_ = NULL;

Search* Search::New() const {
  return new Search;
}

void Search::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_query()) {
      if (query_ != &::google::protobuf::internal::kEmptyString) {
        query_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Search::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string query = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Search::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string query = 1;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->query(), output);
  }

}

int Search::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string query = 1;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Search::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Search*>(&from));
}

void Search::MergeFrom(const Search& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_query()) {
      set_query(from.query());
    }
  }
}

void Search::CopyFrom(const Search& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Search::IsInitialized() const {

  return true;
}

void Search::Swap(Search* other) {
  if (other != this) {
    std::swap(query_, other->query_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Search::GetTypeName() const {
  return "stats.Search";
}


// ===================================================================

#ifndef _MSC_VER
const int PinDrop::kLatlongFieldNumber;
const int PinDrop::kLabelFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int PinDrop::kEventFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::stats::Event,
    ::google::protobuf::internal::MessageTypeTraits< ::stats::PinDrop >, 11, false >
  PinDrop::event(kEventFieldNumber, ::stats::PinDrop::default_instance());
PinDrop::PinDrop()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PinDrop::InitAsDefaultInstance() {
}

PinDrop::PinDrop(const PinDrop& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PinDrop::SharedCtor() {
  _cached_size_ = 0;
  latlong_ = GOOGLE_LONGLONG(0);
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PinDrop::~PinDrop() {
  SharedDtor();
}

void PinDrop::SharedDtor() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (this != default_instance_) {
  }
}

void PinDrop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PinDrop& PinDrop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wire_2eproto();
  return *default_instance_;
}

PinDrop* PinDrop::default_instance_ = NULL;

PinDrop* PinDrop::New() const {
  return new PinDrop;
}

void PinDrop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    latlong_ = GOOGLE_LONGLONG(0);
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::kEmptyString) {
        label_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PinDrop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 latlong = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &latlong_)));
          set_has_latlong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_label;
        break;
      }

      // optional string label = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PinDrop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 latlong = 1;
  if (has_latlong()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->latlong(), output);
  }

  // optional string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->label(), output);
  }

}

int PinDrop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 latlong = 1;
    if (has_latlong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->latlong());
    }

    // optional string label = 2;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PinDrop::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PinDrop*>(&from));
}

void PinDrop::MergeFrom(const PinDrop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_latlong()) {
      set_latlong(from.latlong());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
  }
}

void PinDrop::CopyFrom(const PinDrop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PinDrop::IsInitialized() const {

  return true;
}

void PinDrop::Swap(PinDrop* other) {
  if (other != this) {
    std::swap(latlong_, other->latlong_);
    std::swap(label_, other->label_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PinDrop::GetTypeName() const {
  return "stats.PinDrop";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace stats

// @@protoc_insertion_point(global_scope)
