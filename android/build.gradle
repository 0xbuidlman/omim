buildscript {
  repositories {
    jcenter()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle-experimental:0.2.1'
  }
}

allprojects {
  repositories {
    jcenter()
  }
}

apply plugin: 'com.android.model.application'
apply from: 'secure.properties'

dependencies {
  // android support libs
  compile 'com.android.support:support-v4:22.2.1'
  compile 'com.android.support:appcompat-v7:22.2.1'
  compile 'com.android.support:recyclerview-v7:22.2.1'
  compile 'com.android.support:design:22.2.1'
  // google play services
  compile 'com.google.android.gms:play-services-location:7.8.0'
  compile 'com.google.android.gms:play-services-analytics:7.8.0'
  compile 'com.google.android.gms:play-services-plus:7.8.0'
  // 3-party
  compile 'com.facebook.android:facebook-android-sdk:4.6.0'
  compile 'com.parse.bolts:bolts-android:1.2.1'
  compile 'com.parse:parse-android:1.10.2'
  compile fileTree(dir: '3rd_party', include: '*.jar')
  // BottomSheet
  compile project(":3rd_party:BottomSheet")
  // LinearLayoutManager allowing wrap_content of RecyclerView-s
  // TODO remove this library when default LinearLayoutManager will be fixed.
  compile 'org.solovyev.android.views:linear-layout-manager:0.5@aar'
}

def getDate() {
  def date = new Date()
  def formattedDate = date.format('yyMMdd')
  return formattedDate
}

model {

  android {
    // All properties are read from gradle.properties file
    compileSdkVersion = propTargetSdkVersion.toInteger()
    buildToolsVersion = propBuildToolsVersion

    defaultConfig.with {
      // Default package name is taken from the manifest and should be com.mapswithme.maps
      versionCode = propVersionCode.toInteger()
      versionName = propVersionName
      minSdkVersion.apiLevel = propMinSdkVersion.toInteger()
      targetSdkVersion.apiLevel = propTargetSdkVersion.toInteger()

      buildConfigFields.with {
        create() {
          type = "int"
          name = "RATING_THRESHOLD"
          value = "5"
        }
      }
      buildConfigFields.with {
        create() {
          type = "String"
          name = "SUPPORT_MAIL"
          value = '"android@maps.me"'
        }
      }
      buildConfigFields.with {
        create() {
          type = "String"
          name = "STATISTICS_URL"
          value = '"https://s.maps.me"'
        }
      }
      buildConfigFields.with {
        create() {
          type = "String"
          name = "REVIEW_URL"
          value = '"market://details?id=com.mapswithme.maps.pro"'
        }
      }
    }
  }

  android.ndk {
    moduleName = "mapswithme"

    // TODO return clang, when bug https://code.google.com/p/android/issues/detail?id=182582 will be fixed
    toolchain = "clang"
    toolchainVersion = "3.5"
    cppFlags += "-fexceptions"
    cppFlags += "-frtti"
    cppFlags += "-ffunction-sections"
    cppFlags += "-fdata-sections"
    cppFlags += "-Wno-extern-c-compat"
    cppFlags += "-DOMIM_OS_ANDROID"
    ldLibs += ["log", "GLESv2", "atomic", "z"]
    ldLibs += ["map","render","gui","routing","search","storage","indexer","graphics","platform","anim","geometry","coding",
               "base","expat","freetype","fribidi","minizip","jansson","tomcrypt","protobuf","osrm","stats_client","succinct","opening_hours"]
    stl = "c++_static"

    String includeJni = "-I${file("jni")}".toString()
    cppFlags += includeJni

    String includeOmim = "-I${file("./..")}".toString()
    String includeDrape = "-I${file("./../drape")}".toString()
    String includeProtobuf = "-I${file("./../3party/protobuf/src")}".toString()
    String includeBoost = "-I${file("./../3party/boost")}".toString()
    String includeMap = "-I${file("./../map")}".toString()
    String includeCoding = "-I${file("./../coding")}".toString()
    String includeGeometry = "-I${file("./../geometry")}".toString()
    String includeAnim = "-I${file("./../anim")}".toString()
    String includeBase = "-I${file("./../base")}".toString()
    String includePlatform = "-I${file("./../platform")}".toString()
    String includeGraphics = "-I${file("./../graphics")}".toString()
    String includeIndexer = "-I${file("./../indexer")}".toString()
    String includestorage = "-I${file("./../storage")}".toString()
    String includesearch = "-I${file("./../search")}".toString()
    String includerouting = "-I${file("./../routing")}".toString()
    String includeexpat = "-I${file("./../3party/expat/lib")}".toString()
    String includefreetype = "-I${file("./../3party/freetype")}".toString()
    String includefribidi = "-I${file("./../3party/fribidi")}".toString()
    String includezlib = "-I${file("./../3party/zlib")}".toString()
    String includebzip2 = "-I${file("./../3party/bzip2")}".toString()
    String includejansson = "-I${file("./../3party/jansson")}".toString()
    String includetomcrypt = "-I${file("./../3party/tomcrypt")}".toString()
    String includeprotobuf = "-I${file("./../3party/protobuf")}".toString()
    String includeosrm = "-I${file("./../3party/osrm")}".toString()
    String includestats_client = "-I${file("./../stats_client")}".toString()
    String includesuccinct = "-I${file("./../3party/succinct")}".toString()

    cppFlags += [ includeOmim,includeBoost,includeProtobuf,includeDrape,
                  includeMap,includeCoding,includeGeometry,includeAnim,
                  includeBase,includePlatform,includeGraphics,includeIndexer,
                  includejansson, includetomcrypt, includeprotobuf, includeosrm, includestats_client,
                  includesuccinct,includestorage,includesearch,includerouting,includeexpat,
                  includefreetype,includefribidi,includezlib,includebzip2]

  }

  // TODO: Fix a lot of lint errors in our code
  android.lintOptions {
    abortOnError false
  }

  /*
  signingConfigs {
    mapswithme {
      storeFile file('../tools/android/mapswithme.keystore')
      storePassword 'M@q5W1thMe'
      keyAlias 'mapswithme'
      keyPassword 'M@q5W1thMe'
    }
  }
   */

  android.sources {
    main {
      java {
        source {
          srcDirs += 'src'
          srcDirs += '../3party/Alohalytics/src/android/java'
        }
      }
      jni {
        source {
          srcDirs 'jni'
        }
      }
      jniLibs {
        source {
          srcDirs += 'libs'
        }
      }
      manifest {
        source {
          srcDirs  +='.'
        }
      }
      resources {
        source {
          srcDirs 'res'
        }
      }
      res {
        source {
          srcDirs 'res'
        }
      }
      assets {
        source {
          srcDirs += ['assets']
        }
      }
    }
  }

  android.aaptOptions {
    noCompress 'txt', 'bin', 'skn', 'html', 'png', 'json', 'mwm', 'ttf'
    ignoreAssetsPattern "!.svn:!.git:!.DS_Store:!*.scc:.*:<dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"
  }
  signingConfigs {
    mapswithme {
      storeFile file('../tools/android/mapswithme.keystore')
      storePassword 'M@q5W1thMe'
      keyAlias 'mapswithme'
      keyPassword 'M@q5W1thMe'
    }

    mapswithmeDebug {
      storeFile file('../tools/android/debug.keystore')
      storePassword '12345678'
      keyAlias 'debug'
      keyPassword '12345678'
    }

    yopme {
      storeFile file('YopMe/key/android.keystore')
      storePassword 'YopMeMyFr1end'
      keyAlias 'yopme'
      keyPassword 'YopMeMyFr1end'
    }
  }

  android.buildTypes {
    debug {
      applicationIdSuffix = '.debug'   // Allows to install debug and release builds together
      versionNameSuffix = '-debug'
      debuggable = true
      zipAlignEnabled = true
      ndk.CFlags += "-DDEBUG"
      ndk.CFlags += "-D_DEBUG"
      ndk.cppFlags += "-DDEBUG"
      ndk.cppFlags += "-D_DEBUG"
    }

    release {
//      minifyEnabled = true
//      shrinkResources = true

      ndk.CFlags += "-DRELEASE"
      ndk.CFlags += "-D_RELEASE"
      ndk.cppFlags += "-DRELEASE"
      ndk.cppFlags += "-D_RELEASE"
      ndk.CFlags += "-DOMIM_PRODUCTION"
      ndk.cppFlags += "-DOMIM_PRODUCTION"

      proguardFiles += file('proguard-mwm.txt')
    }
  }

  android.productFlavors {
    create("google") {
      applicationId = 'com.mapswithme.maps.pro'
      ndk.abiFilters += "armeabi-v7a"
      ndk.ldFlags += "-L../../omim-android-production-armeabi-v7a-hard/out/production".toString()
      ndk.ldFlags += "-L../../omim-android-production-armeabi-v7a-hard/out".toString()
      ndk.ldFlags += "-Wl,--no-warn-mismatch"
    }
    create("hoohle") {
      applicationId = 'com.mapswithme.maps.pro'
      ndk.abiFilters += "x86"
      ndk.ldFlags += "-L../../omim-android-production-x86/out/production".toString()
      ndk.ldFlags += "-L../../omim-android-production-x86/out".toString()
    }
  }

  // You can modify the NDK configuration for each variant.
  components.android {
    binaries.beforeEach { binary ->
      println "beforeEach " + binary.name
      binary.mergedNdkConfig.cppFlags.add(
          "-DVARIANT=\"" + binary.name + "\"")
    }
  }
}

//@{ Below are tasks needed to compile our NDK part
apply plugin: 'base'

task cppLibsBuildDebug(type: Exec, description: 'Building DEBUG version of static C++ libraries') {
  println "cppDebug"
  commandLine 'bash', '../tools/autobuild/android.sh', 'debug'
}

task cppLibsBuildRelease(type: Exec, description: 'Building RELEASE/PRODUCTION version of static C++ libraries') {
  println "cppRelease"
  commandLine 'bash', '../tools/autobuild/android.sh', 'production'
}

def NUM_OF_PARALLEL_MAKE_TASKS = Runtime.runtime.availableProcessors() + 1
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def NDK_BUILD = properties.getProperty('ndk.dir') + '/ndk-build'

task ndkBuildDebug(type: Exec, dependsOn: 'cppLibsBuildDebug', description: 'Building DEBUG jni sources') {
  def clArgs = ([NDK_BUILD, '-j' + NUM_OF_PARALLEL_MAKE_TASKS] + propDebugNdkFlags.split(' ')).flatten()
  println "ndkBuildDebug " + clArgs
  commandLine clArgs
}

task ndkBuildRelease(type: Exec, dependsOn: 'cppLibsBuildRelease', description: 'Building RELEASE/PRODUCTION jni sources') {
  def clArgs = ([NDK_BUILD, '-j' + NUM_OF_PARALLEL_MAKE_TASKS] + propReleaseNdkFlags.split(' ')).flatten()
  println "ndkBuildRelease " + clArgs
  commandLine clArgs
}

task ndkBuildClean(type: Exec, description: 'Clean native libraries') {
  commandLine NDK_BUILD, 'clean'
}

//tasks.withType(JavaCompile) { compileTask ->
//  println "JavaCompile " + compileTask.name
//  sourceCompatibility = JavaVersion.VERSION_1_7
//  targetCompatibility = JavaVersion.VERSION_1_7

//  if (compileTask.name.contains('Release') || compileTask.name.contains('Beta')) {
//    compileTask.dependsOn ndkBuildRelease
//  } else {
//    compileTask.dependsOn ndkBuildDebug
//  }
//}

clean.dependsOn 'ndkBuildClean'
