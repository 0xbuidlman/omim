buildscript {
  repositories {
    jcenter()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle-experimental:0.1.0'
  }
}

allprojects {
  repositories {
    jcenter()
  }
}

apply plugin: 'com.android.model.application'
apply from: 'secure.properties'

dependencies {
  // android support libs
  compile 'com.android.support:support-v4:22.2.1'
  compile 'com.android.support:appcompat-v7:22.2.1'
  compile 'com.android.support:recyclerview-v7:22.2.1'
  compile 'com.android.support:design:22.2.1'
  // google play services
  compile 'com.google.android.gms:play-services-location:7.8.0'
  compile 'com.google.android.gms:play-services-analytics:7.8.0'
  compile 'com.google.android.gms:play-services-plus:7.8.0'
  // 3-party
  compile 'com.facebook.android:facebook-android-sdk:4.6.0'
  compile 'com.parse.bolts:bolts-android:1.2.1'
  compile 'com.parse:parse-android:1.10.2'
  compile fileTree(dir: '3rd_party', include: '*.jar')
  // BottomSheet
  compile project(":3rd_party:BottomSheet")
  // LinearLayoutManager allowing wrap_content of RecyclerView-s
  // TODO remove this library when default LinearLayoutManager will be fixed.
  compile 'org.solovyev.android.views:linear-layout-manager:0.5@aar'
}

def getDate() {
  def date = new Date()
  def formattedDate = date.format('yyMMdd')
  return formattedDate
}

model {

  android {
    // All properties are read from gradle.properties file
    compileSdkVersion = propTargetSdkVersion.toInteger()
    buildToolsVersion = propBuildToolsVersion

    defaultConfig.with {
      // Default package name is taken from the manifest and should be com.mapswithme.maps
      versionCode = propVersionCode.toInteger()
      versionName = propVersionName
      minSdkVersion.apiLevel = propMinSdkVersion.toInteger()
      targetSdkVersion.apiLevel = propTargetSdkVersion.toInteger()
    }

    gradle.projectsEvaluated {
      applicationVariants.all { variant ->
        def task = variant.name.capitalize()
        def runTask = "run$task"
        def installTask = "install$task"
        project.task(type: Exec, "${runTask}", dependsOn: "${installTask}") {
          def component = "$applicationId/com.mapswithme.maps.DownloadResourcesActivity"
          executable "sh"
          args "-c", "adb shell am start -n ${component}"
        }
      }
    }
  }

  android.ndk {
    moduleName = "mapswithme"

    toolchain = "clang"
    toolchainVersion = "3.5"
    cppFlags += "-fexceptions"
    cppFlags += "-frtti"
    CFlags += "-ffunction-sections -fdata-sections -Wno-extern-c-compat"
    ldLibs += "log"
    ldLibs += "GLESv2"
    ldLibs += "atomic"
    ldLibs += "l"
    stl = "c++_static"

    String includeGl = "-I${file("/jni/opengl")}".toString()
    String includeCore = "-I${file("/jni/com/mapswithme/core")}".toString()
    String includeMaps = "-I${file("/jni/com/mapswithme/maps")}".toString()
    String includePlatform = "-I${file("/jni/com/mapswithme/platform")}".toString()
    String includeNvThread = "-I${file("/nv_thread")}".toString()
    String includeNvEvent = "-I${file("/nv_event")}".toString()
    String includeOmim = "-I${file("/..")}".toString()
    String includeDrape = "-I${file("/../drape")}".toString()
    String includeProtobuf = "-I${file("/../3party/protobuf/src")}".toString()
    String includeBoost = "-I${file("/../3party/boost")}".toString()

    cppFlags += includeBoost
    cppFlags += includeProtobuf
    cppFlags += includeCore
    cppFlags += includeMaps
    cppFlags += includePlatform
    cppFlags += includeNvThread
    cppFlags += includeNvEvent
    cppFlags += includeOmim
    cppFlags += includeGl
    cppFlags += includeDrape

    CFlags += includeBoost
    CFlags += includeProtobuf
    CFlags += includeCore
    CFlags += includeMaps
    CFlags += includePlatform
    CFlags += includeNvThread
    CFlags += includeNvEvent
    CFlags += includeOmim
    CFlags += includeGl
    CFlags += includeDrape

    //

    String includeMap = "-I${file("/../map")}".toString()
    String includeCoding = "-I${file("/../coding")}".toString()
    String includegeometry = "-I${file("/../geometry")}".toString()
    String includeanim = "-I${file("/../anim")}".toString()
    String includebase = "-I${file("/../base")}".toString()
    String includeplatform = "-I${file("/../platform")}".toString()
    String includegraphics = "-I${file("/../graphics")}".toString()
    String includeindexer = "-I${file("/../indexer")}".toString()
    cppFlags += includeMap
    cppFlags += includeCoding
    cppFlags += includegeometry
    cppFlags += includeanim
    cppFlags += includebase
    cppFlags += includeplatform
    cppFlags += includegraphics
    cppFlags += includeindexer

    CFlags += includeMap
    CFlags += includeCoding
    CFlags += includegeometry
    CFlags += includeanim
    CFlags += includebase
    CFlags += includeplatform
    CFlags += includegraphics
    CFlags += includeindexer
    //

    String includestorage = "-I${file("/../storage")}".toString()
    String includesearch = "-I${file("/../search")}".toString()
    String includerouting = "-I${file("/../routing")}".toString()
    String includeexpat = "-I${file("/../3party/expat")}".toString()
    String includefreetype = "-I${file("/../3party/freetype")}".toString()
    String includefribidi = "-I${file("/../3party/fribidi")}".toString()
    String includezlib = "-I${file("/../3party/zlib")}".toString()
    String includebzip2 = "-I${file("/../3party/bzip2")}".toString()
    cppFlags += includestorage
    cppFlags += includesearch
    cppFlags += includerouting
    cppFlags += includeexpat
    cppFlags += includefreetype
    cppFlags += includefribidi
    cppFlags += includezlib
    cppFlags += includebzip2

    CFlags += includestorage
    CFlags += includesearch
    CFlags += includerouting
    CFlags += includeexpat
    CFlags += includefreetype
    CFlags += includefribidi
    CFlags += includezlib
    CFlags += includebzip2

    String includejansson = "-I${file("/../3party/jansson")}".toString()
    String includetomcrypt = "-I${file("/../3party/tomcrypt")}".toString()
    String includeprotobuf = "-I${file("/../3party/protobuf")}".toString()
    String includeosrm = "-I${file("/../3party/osrm")}".toString()
    String includestats_client = "-I${file("/../stats_client")}".toString()
    String includesuccinct = "-I${file("/../3party/succinct")}".toString()

    cppFlags += includejansson
    cppFlags += includetomcrypt
    cppFlags += includeprotobuf
    cppFlags += includeosrm
    cppFlags += includestats_client
    cppFlags += includesuccinct

    CFlags += includejansson
    CFlags += includetomcrypt
    CFlags += includeprotobuf
    CFlags += includeosrm
    CFlags += includestats_client
    CFlags += includesuccinct
  }

  // TODO: Fix a lot of lint errors in our code
  android.lintOptions {
    abortOnError false
  }

  android.sources {
    main {
      jni {
        source {
          srcDirs 'jni', '../map', '../gui', '../coding', '../geometry', '../anim', '../base',
              '../platform', '../graphics', '../indexer', '../storage', '../search', '../routing',
              '../3party/expat', '../3party/freetype', '../3party/fribidi', '../3party/zlib',
              '../3party/bzip2', '../3party/jansson',
              '../3party/tomcrypt', '../3party/protobuf', '../3party/osrm',
              '../stats_client', '../3party/succinct'
        }
      }
      assets {
        source {
          srcDirs += 'src'
          srcDirs += '../3party/Alohalytics/src/android/java'
        }
      }
  gradle.projectsEvaluated {
    android.applicationVariants.all { variant ->
      def task = variant.name.capitalize()
      def runTask = "run$task"
      def installTask = "install$task"
      project.task(type: Exec, "${runTask}", dependsOn: "${installTask}") {
        def component = "$applicationId/com.mapswithme.maps.DownloadResourcesActivity"
        executable "sh"
        args "-c", "adb shell am start -n ${component}"
      }
    }
  }

  signingConfigs {
    mapswithme {
      storeFile file('../tools/android/mapswithme.keystore')
      storePassword 'M@q5W1thMe'
      keyAlias 'mapswithme'
      keyPassword 'M@q5W1thMe'
    }

    mapswithmeDebug {
      storeFile file('../tools/android/debug.keystore')
      storePassword '12345678'
      keyAlias 'debug'
      keyPassword '12345678'
    }

    yopme {
      storeFile file('YopMe/key/android.keystore')
      storePassword 'YopMeMyFr1end'
      keyAlias 'yopme'
      keyPassword 'YopMeMyFr1end'
    }
  }

  android.buildTypes {
    debug {
      applicationIdSuffix = '.debug'   // Allows to install debug and release builds together
      versionNameSuffix = '-debug'
      isJniDebuggable = true
      isZipAlignEnabled = true
      ndk.CFlags += "-DDEBUG"
      ndk.CFlags += "-D_DEBUG"
      ndk.cppFlags += "-DDEBUG"
      ndk.cppFlags += "-D_DEBUG"
    }

    release {
      isMinifyEnabled = true
      shrinkResources = true

      ndk.CFlags += "-DRELEASE"
      ndk.CFlags += "-D_RELEASE"
      ndk.cppFlags += "-DRELEASE"
      ndk.cppFlags += "-D_RELEASE"
      ndk.CFlags += "-DOMIM_PRODUCTION"
      ndk.cppFlags += "-DOMIM_PRODUCTION"

      proguardFiles += file('proguard-mwm.txt')
    }
  }

  android.productFlavors {
    create("google") {
      applicationId = 'com.mapswithme.maps.pro'
      ndk.abiFilters += "armeabi-v7a"
    }
  }

  // You can modify the NDK configuration for each variant.
  components.android {
    binaries.beforeEach { binary ->
      println("----------")
      println(binary.name)
      binary.mergedNdkConfig.cppFlags.add(
          "-DVARIANT=\"" + binary.name + "\"")
    }
  }
}

//@{ Below are tasks needed to compile our NDK part
apply plugin: 'base'

task cppLibsBuildDebug(type: Exec, description: 'Building DEBUG version of static C++ libraries') {
  commandLine 'bash', '../tools/autobuild/android.sh', 'debug'
}

task cppLibsBuildRelease(type: Exec, description: 'Building RELEASE/PRODUCTION version of static C++ libraries') {
  commandLine 'bash', '../tools/autobuild/android.sh', 'production'
}

def NUM_OF_PARALLEL_MAKE_TASKS = Runtime.runtime.availableProcessors() + 1
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def NDK_BUILD = properties.getProperty('ndk.dir') + '/ndk-build'

task ndkBuildDebug(type: Exec, dependsOn: 'cppLibsBuildDebug', description: 'Building DEBUG jni sources') {
  def clArgs = ([NDK_BUILD, '-j' + NUM_OF_PARALLEL_MAKE_TASKS] + propDebugNdkFlags.split(' ')).flatten()
  commandLine clArgs
}

task ndkBuildRelease(type: Exec, dependsOn: 'cppLibsBuildRelease', description: 'Building RELEASE/PRODUCTION jni sources') {
  def clArgs = ([NDK_BUILD, '-j' + NUM_OF_PARALLEL_MAKE_TASKS] + propReleaseNdkFlags.split(' ')).flatten()
  commandLine clArgs
}

task ndkBuildClean(type: Exec, description: 'Clean native libraries') {
  commandLine NDK_BUILD, 'clean'
}

tasks.withType(JavaCompile) { compileTask ->
  if (compileTask.name.contains('Release') || compileTask.name.contains('Beta')) {
    compileTask.dependsOn ndkBuildRelease
  } else {
    compileTask.dependsOn ndkBuildDebug
  }
}

tasks.withType(JavaCompile) { compileTask ->
  if (compileTask.name.contains('Release') || compileTask.name.contains('Beta')) {
    compileTask.dependsOn ndkBuildRelease
  } else {
    compileTask.dependsOn ndkBuildDebug
  }
}


clean.dependsOn 'ndkBuildClean'
