buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:0.12.2'
  }
}

apply plugin: 'com.android.application'

dependencies {
  compile propAndroidSupportLibrary, propGooglePlayServices
  compile project(':3rd_party:external_styles')
  compile project(':3rd_party:facebook-android-sdk:facebook')
  compile fileTree(dir: '3rd_party', include: '*.jar')
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyMMdd')
    return formattedDate
}

android {
  // All properties are read from gradle.properties file
  compileSdkVersion propTargetSdkVersion.toInteger()
  buildToolsVersion propBuildToolsVersion


  defaultConfig {
    // Default package name is taken from the manifest and should be com.mapswithme.maps
    versionCode propVersionCode.toInteger()
    versionName propVersionName
    minSdkVersion propMinSdkVersion.toInteger()
    targetSdkVersion propTargetSdkVersion.toInteger()
  }

  sourceSets.main {
    manifest.srcFile 'AndroidManifest.xml'
    java.srcDirs = ['src']
    res.srcDirs = ['res']
    assets.srcDirs = ['assets']
  }

  productFlavors {

    googlePro {
      applicationId 'com.mapswithme.maps.pro'
      buildConfigField 'boolean', 'IS_PRO',     'true'
      buildConfigField 'String',  'PRO_URL',    '"market://details?id=com.mapswithme.maps.pro"'
      buildConfigField 'String',  'REVIEW_URL', '"market://details?id=com.mapswithme.maps.pro"'
      android.sourceSets.googlePro.setRoot('flavors/pro')
      android.sourceSets.googlePro.assets.srcDirs = ['flavors/guides-assets']
    }

    googleLite {
      applicationId 'com.mapswithme.maps'
      buildConfigField 'boolean', 'IS_PRO',     'false'
      buildConfigField 'String',  'PRO_URL',    '"market://details?id=com.mapswithme.maps.pro"'
      buildConfigField 'String',  'REVIEW_URL', '"market://details?id=com.mapswithme.maps"'
      android.sourceSets.googleLite.setRoot('flavors/lite')
      android.sourceSets.googleLite.assets.srcDirs = ['flavors/guides-assets']
    }

    samsungPro {
      applicationId 'com.mapswithme.maps.pro'
      buildConfigField 'boolean', 'IS_PRO',     'true'
      buildConfigField 'String',  'PRO_URL',    '"samsungapps://ProductDetail/com.mapswithme.maps.pro"'
      buildConfigField 'String',  'REVIEW_URL', '"samsungapps://ProductDetail/com.mapswithme.maps.pro"'
      android.sourceSets.samsungPro.setRoot('flavors/pro')
      android.sourceSets.samsungPro.assets.srcDirs = ['flavors/guides-assets']
    }

    samsungLite {
      applicationId 'com.mapswithme.maps.samsung'       // historically different id for samsung lite version
      buildConfigField 'boolean', 'IS_PRO',     'false'
      buildConfigField 'String',  'PRO_URL',    '"samsungapps://ProductDetail/com.mapswithme.maps.pro"'
      buildConfigField 'String',  'REVIEW_URL', '"samsungapps://ProductDetail/com.mapswithme.maps.samsung"'
      android.sourceSets.samsungLite.setRoot('flavors/lite')
      android.sourceSets.samsungLite.assets.srcDirs = ['flavors/guides-assets']
    }

    amazonPro {
      applicationId 'com.mapswithme.maps.pro'
      buildConfigField 'boolean', 'IS_PRO',     'true'
      buildConfigField 'String',  'PRO_URL',    '"amzn://apps/android?p=com.mapswithme.maps.pro"'
      buildConfigField 'String',  'REVIEW_URL', '"amzn://apps/android?p=com.mapswithme.maps.pro"'
      android.sourceSets.amazonPro.setRoot('flavors/pro')
      // Do not include guides assets for Amazon, they don't like GP apps ads
    }

    amazonLite {
      applicationId 'com.mapswithme.maps'
      buildConfigField 'boolean', 'IS_PRO',     'false'
      buildConfigField 'String',  'PRO_URL',    '"amzn://apps/android?p=com.mapswithme.maps.pro"'
      buildConfigField 'String',  'REVIEW_URL', '"amzn://apps/android?p=com.mapswithme.maps"'
      android.sourceSets.amazonLite.setRoot('flavors/lite')
      // Do not include guides assets for Amazon, they don't like GP apps ads
    }

    androidpitPro {
      applicationId 'com.mapswithme.maps.pro'
      buildConfigField 'boolean', 'IS_PRO',     'true'
      buildConfigField 'String',  'PRO_URL',    '"appcenter://package/com.mapswithme.maps.pro"'
      buildConfigField 'String',  'REVIEW_URL', '"appcenter://package/com.mapswithme.maps.pro"'
      android.sourceSets.androidpitPro.setRoot('flavors/pro')
      android.sourceSets.androidpitPro.assets.srcDirs = ['flavors/guides-assets']
    }

    androidpitLite {
      applicationId 'com.mapswithme.maps'
      buildConfigField 'boolean', 'IS_PRO',     'false'
      buildConfigField 'String',  'PRO_URL',    '"appcenter://package/com.mapswithme.maps.pro"'
      buildConfigField 'String',  'REVIEW_URL', '"appcenter://package/com.mapswithme.maps"'
      android.sourceSets.androidpitLite.setRoot('flavors/lite')
      android.sourceSets.androidpitLite.assets.srcDirs = ['flavors/guides-assets']
    }

    slidemePro {
      applicationId 'com.mapswithme.maps.pro'
      buildConfigField 'boolean', 'IS_PRO',     'true'
      buildConfigField 'String',  'PRO_URL',    '"sam://details?bundleId=5eed1b74-8c8b-11e2-8af8-1670ef61174f"'
      buildConfigField 'String',  'REVIEW_URL', '"sam://details?bundleId=5eed1b74-8c8b-11e2-8af8-1670ef61174f"'
      android.sourceSets.slidemePro.setRoot('flavors/pro')
      android.sourceSets.slidemePro.assets.srcDirs = ['flavors/guides-assets']
    }

    slidemeLite {
      applicationId 'com.mapswithme.maps'
      buildConfigField 'boolean', 'IS_PRO',     'false'
      buildConfigField 'String',  'PRO_URL',    '"sam://details?bundleId=5eed1b74-8c8b-11e2-8af8-1670ef61174f"'
      buildConfigField 'String',  'REVIEW_URL', '"sam://details?bundleId=943fe9dc-9799-11e2-8af8-1670ef61174f"'
      android.sourceSets.slidemeLite.setRoot('flavors/lite')
      android.sourceSets.slidemeLite.assets.srcDirs = ['flavors/guides-assets']
    }

    yandexPro {
      applicationId 'com.mapswithme.maps.pro'
      buildConfigField 'boolean', 'IS_PRO',     'true'
      buildConfigField 'String',  'PRO_URL',    '"yastore://details?id=com.mapswithme.maps.pro"'
      buildConfigField 'String',  'REVIEW_URL', '"yastore://details?id=com.mapswithme.maps.pro"'
      android.sourceSets.yandexPro.setRoot('flavors/pro')
      android.sourceSets.yandexPro.assets.srcDirs = ['flavors/guides-assets']
    }

    yandexLite {
      applicationId 'com.mapswithme.maps'
      buildConfigField 'boolean', 'IS_PRO',     'false'
      buildConfigField 'String',  'PRO_URL',    '"yastore://details?id=com.mapswithme.maps.pro"'
      buildConfigField 'String',  'REVIEW_URL', '"yastore://details?id=com.mapswithme.maps"'
      android.sourceSets.yandexLite.setRoot('flavors/lite')
      android.sourceSets.yandexLite.assets.srcDirs = ['flavors/guides-assets']
    }
  }

  // TODO: Fix a lot of lint errors in our code
  lintOptions {
    abortOnError false
  }

  applicationVariants.all { variant ->
    // version at the end of each built apk
    def file = variant.outputFile
    variant.outputFile = new File(file.parent, file.name.replace(".apk", "-" + defaultConfig.versionName + "-" + getDate() + ".apk"))
  }

  signingConfigs {
    mapswithme {
      storeFile file('../tools/android/mapswithme.keystore')
      storePassword '***REMOVED***'
      keyAlias 'mapswithme'
      keyPassword '***REMOVED***'
    }

    yopme {
      storeFile file('YopMe/key/android.keystore')
      storePassword '***REMOVED***'
      keyAlias 'yopme'
      keyPassword '***REMOVED***'
    }
  }

  buildTypes {
    debug {
      applicationIdSuffix '.debug'   // Allows to install debug and release builds together
      versionNameSuffix '-debug'
      jniDebugBuild true           // Enable jni debug build
      zipAlign true
      android.sourceSets.debug.setRoot('flavors/debug')
    }

    release {
      signingConfig signingConfigs.mapswithme
    }

    beta {
      applicationIdSuffix '.beta'
      versionNameSuffix '-beta'
      signingConfig signingConfigs.mapswithme
      android.sourceSets.beta.setRoot('flavors/beta')
    }
  }

  // We don't compress these extensions in assets/ because our random FileReader can't read zip-compressed files from apk
  aaptOptions {
    noCompress 'txt', 'bin', 'skn', 'html', 'png', 'json', 'mwm', 'ttf'
    ignoreAssetsPattern "!.svn:!.git:!.DS_Store:!*.scc:.*:<dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"
  }

  // Enables new Java features in KitKat+ but needs Java 1.7 installed
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }
}


//@{ Below are tasks needed to compile our NDK part
apply plugin:'base'

task cppLibsBuildDebug(type:Exec, description: 'Building DEBUG version of static C++ libraries') {
  commandLine 'bash', '../tools/autobuild/android.sh', 'debug'
}

task cppLibsBuildRelease(type:Exec, description: 'Building RELEASE/PRODUCTION version of static C++ libraries') {
  commandLine 'bash', '../tools/autobuild/android.sh', 'production'
}

def NUM_OF_PARALLEL_MAKE_TASKS = Runtime.runtime.availableProcessors() + 1
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def NDK_BUILD = properties.getProperty('ndk.dir') + '/ndk-build'

task ndkBuildDebug(type:Exec, dependsOn: 'cppLibsBuildDebug', description: 'Building DEBUG jni sources') {
  def clArgs = ([NDK_BUILD, '-j' + NUM_OF_PARALLEL_MAKE_TASKS] + propDebugNdkFlags.split(' ')).flatten()
  commandLine clArgs
}

task ndkBuildRelease(type:Exec, dependsOn: 'cppLibsBuildRelease', description: 'Building RELEASE/PRODUCTION jni sources') {
  def clArgs = ([NDK_BUILD, '-j' + NUM_OF_PARALLEL_MAKE_TASKS] + propReleaseNdkFlags.split(' ')).flatten()
  commandLine clArgs
}

task ndkBuildClean(type:Exec, description: 'Clean native libraries') {
  commandLine NDK_BUILD, 'clean'
}

// This one is needed for clean task
task copyNativeLibs(type:Copy, description: 'Copy native libraries') {
  from(new File('libs')) { include '**/*.so' }
  into new File(buildDir, 'native-libs')
}

// TODO: avoid copypaste and resolve tasks dependencies in more convenient way
task copyNativeLibsRelease(type:Copy, dependsOn: ndkBuildRelease, description: 'Copy native libraries') {
  from(new File('libs')) { include '**/*.so' }
  into new File(buildDir, 'native-libs')
}

task copyNativeLibsDebug(type:Copy, dependsOn: ndkBuildDebug, description: 'Copy native libraries') {
  from(new File('libs')) { include '**/*.so' }
  into new File(buildDir, 'native-libs')
}

tasks.withType(Compile) { compileTask ->
  if (compileTask.name.contains('Release') || compileTask.name.contains('Beta')) {
    compileTask.dependsOn copyNativeLibsRelease
  } else {
    compileTask.dependsOn copyNativeLibsDebug
  }
}

clean.dependsOn 'cleanCopyNativeLibs'
clean.dependsOn 'ndkBuildClean'

tasks.withType(com.android.build.gradle.tasks.PackageApplication) { pkgTask ->
  pkgTask.jniFolders = new HashSet<File>()
  pkgTask.jniFolders.add(new File(buildDir, 'native-libs'))
}

//@} End of tasks needed to compile our NDK part
