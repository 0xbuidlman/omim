// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "drules_struct.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* DashDotProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DashDotProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* LineRuleProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LineRuleProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* AreaRuleProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AreaRuleProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SymbolRuleProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SymbolRuleProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CaptionRuleProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CaptionRuleProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CircleRuleProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CircleRuleProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DrawElementProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DrawElementProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClassifElementProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClassifElementProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_drules_5fstruct_2eproto() {
  protobuf_AddDesc_drules_5fstruct_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "drules_struct.proto");
  GOOGLE_CHECK(file != NULL);
  DashDotProto_descriptor_ = file->message_type(0);
  static const int DashDotProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DashDotProto, dd_),
  };
  DashDotProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DashDotProto_descriptor_,
      DashDotProto::default_instance_,
      DashDotProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DashDotProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DashDotProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DashDotProto));
  LineRuleProto_descriptor_ = file->message_type(1);
  static const int LineRuleProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineRuleProto, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineRuleProto, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineRuleProto, dashdot_),
  };
  LineRuleProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LineRuleProto_descriptor_,
      LineRuleProto::default_instance_,
      LineRuleProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineRuleProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineRuleProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LineRuleProto));
  AreaRuleProto_descriptor_ = file->message_type(2);
  static const int AreaRuleProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreaRuleProto, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreaRuleProto, border_),
  };
  AreaRuleProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AreaRuleProto_descriptor_,
      AreaRuleProto::default_instance_,
      AreaRuleProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreaRuleProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreaRuleProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AreaRuleProto));
  SymbolRuleProto_descriptor_ = file->message_type(3);
  static const int SymbolRuleProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolRuleProto, name_),
  };
  SymbolRuleProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SymbolRuleProto_descriptor_,
      SymbolRuleProto::default_instance_,
      SymbolRuleProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolRuleProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolRuleProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SymbolRuleProto));
  CaptionRuleProto_descriptor_ = file->message_type(4);
  static const int CaptionRuleProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptionRuleProto, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptionRuleProto, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptionRuleProto, stroke_color_),
  };
  CaptionRuleProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CaptionRuleProto_descriptor_,
      CaptionRuleProto::default_instance_,
      CaptionRuleProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptionRuleProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptionRuleProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CaptionRuleProto));
  CircleRuleProto_descriptor_ = file->message_type(5);
  static const int CircleRuleProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircleRuleProto, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircleRuleProto, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircleRuleProto, border_),
  };
  CircleRuleProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CircleRuleProto_descriptor_,
      CircleRuleProto::default_instance_,
      CircleRuleProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircleRuleProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircleRuleProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CircleRuleProto));
  DrawElementProto_descriptor_ = file->message_type(6);
  static const int DrawElementProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawElementProto, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawElementProto, lines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawElementProto, area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawElementProto, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawElementProto, caption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawElementProto, circle_),
  };
  DrawElementProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DrawElementProto_descriptor_,
      DrawElementProto::default_instance_,
      DrawElementProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawElementProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawElementProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DrawElementProto));
  ClassifElementProto_descriptor_ = file->message_type(7);
  static const int ClassifElementProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassifElementProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassifElementProto, element_),
  };
  ClassifElementProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClassifElementProto_descriptor_,
      ClassifElementProto::default_instance_,
      ClassifElementProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassifElementProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassifElementProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClassifElementProto));
  ContainerProto_descriptor_ = file->message_type(8);
  static const int ContainerProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerProto, cont_),
  };
  ContainerProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerProto_descriptor_,
      ContainerProto::default_instance_,
      ContainerProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_drules_5fstruct_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DashDotProto_descriptor_, &DashDotProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LineRuleProto_descriptor_, &LineRuleProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AreaRuleProto_descriptor_, &AreaRuleProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SymbolRuleProto_descriptor_, &SymbolRuleProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CaptionRuleProto_descriptor_, &CaptionRuleProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CircleRuleProto_descriptor_, &CircleRuleProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DrawElementProto_descriptor_, &DrawElementProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClassifElementProto_descriptor_, &ClassifElementProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerProto_descriptor_, &ContainerProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_drules_5fstruct_2eproto() {
  delete DashDotProto::default_instance_;
  delete DashDotProto_reflection_;
  delete LineRuleProto::default_instance_;
  delete LineRuleProto_reflection_;
  delete AreaRuleProto::default_instance_;
  delete AreaRuleProto_reflection_;
  delete SymbolRuleProto::default_instance_;
  delete SymbolRuleProto_reflection_;
  delete CaptionRuleProto::default_instance_;
  delete CaptionRuleProto_reflection_;
  delete CircleRuleProto::default_instance_;
  delete CircleRuleProto_reflection_;
  delete DrawElementProto::default_instance_;
  delete DrawElementProto_reflection_;
  delete ClassifElementProto::default_instance_;
  delete ClassifElementProto_reflection_;
  delete ContainerProto::default_instance_;
  delete ContainerProto_reflection_;
}

void protobuf_AddDesc_drules_5fstruct_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023drules_struct.proto\"\032\n\014DashDotProto\022\n\n"
    "\002dd\030\001 \003(\001\"M\n\rLineRuleProto\022\r\n\005width\030\001 \002("
    "\001\022\r\n\005color\030\002 \002(\005\022\036\n\007dashdot\030\003 \001(\0132\r.Dash"
    "DotProto\">\n\rAreaRuleProto\022\r\n\005color\030\001 \002(\005"
    "\022\036\n\006border\030\002 \001(\0132\016.LineRuleProto\"\037\n\017Symb"
    "olRuleProto\022\014\n\004name\030\001 \002(\t\"G\n\020CaptionRule"
    "Proto\022\016\n\006height\030\001 \002(\005\022\r\n\005color\030\002 \001(\005\022\024\n\014"
    "stroke_color\030\003 \001(\005\"P\n\017CircleRuleProto\022\016\n"
    "\006radius\030\001 \002(\001\022\r\n\005color\030\002 \002(\005\022\036\n\006border\030\003"
    " \001(\0132\016.LineRuleProto\"\306\001\n\020DrawElementProt"
    "o\022\r\n\005scale\030\001 \002(\005\022\035\n\005lines\030\002 \003(\0132\016.LineRu"
    "leProto\022\034\n\004area\030\003 \001(\0132\016.AreaRuleProto\022 \n"
    "\006symbol\030\004 \001(\0132\020.SymbolRuleProto\022\"\n\007capti"
    "on\030\005 \001(\0132\021.CaptionRuleProto\022 \n\006circle\030\006 "
    "\001(\0132\020.CircleRuleProto\"G\n\023ClassifElementP"
    "roto\022\014\n\004name\030\001 \002(\t\022\"\n\007element\030\002 \003(\0132\021.Dr"
    "awElementProto\"4\n\016ContainerProto\022\"\n\004cont"
    "\030\001 \003(\0132\024.ClassifElementProto", 708);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "drules_struct.proto", &protobuf_RegisterTypes);
  DashDotProto::default_instance_ = new DashDotProto();
  LineRuleProto::default_instance_ = new LineRuleProto();
  AreaRuleProto::default_instance_ = new AreaRuleProto();
  SymbolRuleProto::default_instance_ = new SymbolRuleProto();
  CaptionRuleProto::default_instance_ = new CaptionRuleProto();
  CircleRuleProto::default_instance_ = new CircleRuleProto();
  DrawElementProto::default_instance_ = new DrawElementProto();
  ClassifElementProto::default_instance_ = new ClassifElementProto();
  ContainerProto::default_instance_ = new ContainerProto();
  DashDotProto::default_instance_->InitAsDefaultInstance();
  LineRuleProto::default_instance_->InitAsDefaultInstance();
  AreaRuleProto::default_instance_->InitAsDefaultInstance();
  SymbolRuleProto::default_instance_->InitAsDefaultInstance();
  CaptionRuleProto::default_instance_->InitAsDefaultInstance();
  CircleRuleProto::default_instance_->InitAsDefaultInstance();
  DrawElementProto::default_instance_->InitAsDefaultInstance();
  ClassifElementProto::default_instance_->InitAsDefaultInstance();
  ContainerProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_drules_5fstruct_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_drules_5fstruct_2eproto {
  StaticDescriptorInitializer_drules_5fstruct_2eproto() {
    protobuf_AddDesc_drules_5fstruct_2eproto();
  }
} static_descriptor_initializer_drules_5fstruct_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int DashDotProto::kDdFieldNumber;
#endif  // !_MSC_VER

DashDotProto::DashDotProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DashDotProto::InitAsDefaultInstance() {
}

DashDotProto::DashDotProto(const DashDotProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DashDotProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DashDotProto::~DashDotProto() {
  SharedDtor();
}

void DashDotProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DashDotProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DashDotProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DashDotProto_descriptor_;
}

const DashDotProto& DashDotProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drules_5fstruct_2eproto();  return *default_instance_;
}

DashDotProto* DashDotProto::default_instance_ = NULL;

DashDotProto* DashDotProto::New() const {
  return new DashDotProto;
}

void DashDotProto::Clear() {
  dd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DashDotProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double dd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_dd())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_dd())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_dd;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DashDotProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double dd = 1;
  for (int i = 0; i < this->dd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->dd(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DashDotProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double dd = 1;
  for (int i = 0; i < this->dd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->dd(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DashDotProto::ByteSize() const {
  int total_size = 0;
  
  // repeated double dd = 1;
  {
    int data_size = 0;
    data_size = 8 * this->dd_size();
    total_size += 1 * this->dd_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DashDotProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DashDotProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DashDotProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DashDotProto::MergeFrom(const DashDotProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  dd_.MergeFrom(from.dd_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DashDotProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DashDotProto::CopyFrom(const DashDotProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DashDotProto::IsInitialized() const {
  
  return true;
}

void DashDotProto::Swap(DashDotProto* other) {
  if (other != this) {
    dd_.Swap(&other->dd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DashDotProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DashDotProto_descriptor_;
  metadata.reflection = DashDotProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LineRuleProto::kWidthFieldNumber;
const int LineRuleProto::kColorFieldNumber;
const int LineRuleProto::kDashdotFieldNumber;
#endif  // !_MSC_VER

LineRuleProto::LineRuleProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LineRuleProto::InitAsDefaultInstance() {
  dashdot_ = const_cast< ::DashDotProto*>(&::DashDotProto::default_instance());
}

LineRuleProto::LineRuleProto(const LineRuleProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LineRuleProto::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0;
  color_ = 0;
  dashdot_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LineRuleProto::~LineRuleProto() {
  SharedDtor();
}

void LineRuleProto::SharedDtor() {
  if (this != default_instance_) {
    delete dashdot_;
  }
}

void LineRuleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineRuleProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineRuleProto_descriptor_;
}

const LineRuleProto& LineRuleProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drules_5fstruct_2eproto();  return *default_instance_;
}

LineRuleProto* LineRuleProto::default_instance_ = NULL;

LineRuleProto* LineRuleProto::New() const {
  return new LineRuleProto;
}

void LineRuleProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    width_ = 0;
    color_ = 0;
    if (has_dashdot()) {
      if (dashdot_ != NULL) dashdot_->::DashDotProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LineRuleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double width = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_color;
        break;
      }
      
      // required int32 color = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dashdot;
        break;
      }
      
      // optional .DashDotProto dashdot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dashdot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dashdot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LineRuleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->width(), output);
  }
  
  // required int32 color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->color(), output);
  }
  
  // optional .DashDotProto dashdot = 3;
  if (has_dashdot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dashdot(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LineRuleProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->width(), target);
  }

  // required int32 color = 2;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->color(), target);
  }

  // optional .DashDotProto dashdot = 3;
  if (has_dashdot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dashdot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LineRuleProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double width = 1;
    if (has_width()) {
      total_size += 1 + 8;
    }
    
    // required int32 color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }
    
    // optional .DashDotProto dashdot = 3;
    if (has_dashdot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dashdot());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineRuleProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LineRuleProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LineRuleProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LineRuleProto::MergeFrom(const LineRuleProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_dashdot()) {
      mutable_dashdot()->::DashDotProto::MergeFrom(from.dashdot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LineRuleProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineRuleProto::CopyFrom(const LineRuleProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineRuleProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void LineRuleProto::Swap(LineRuleProto* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(color_, other->color_);
    std::swap(dashdot_, other->dashdot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LineRuleProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LineRuleProto_descriptor_;
  metadata.reflection = LineRuleProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AreaRuleProto::kColorFieldNumber;
const int AreaRuleProto::kBorderFieldNumber;
#endif  // !_MSC_VER

AreaRuleProto::AreaRuleProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AreaRuleProto::InitAsDefaultInstance() {
  border_ = const_cast< ::LineRuleProto*>(&::LineRuleProto::default_instance());
}

AreaRuleProto::AreaRuleProto(const AreaRuleProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AreaRuleProto::SharedCtor() {
  _cached_size_ = 0;
  color_ = 0;
  border_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AreaRuleProto::~AreaRuleProto() {
  SharedDtor();
}

void AreaRuleProto::SharedDtor() {
  if (this != default_instance_) {
    delete border_;
  }
}

void AreaRuleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AreaRuleProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AreaRuleProto_descriptor_;
}

const AreaRuleProto& AreaRuleProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drules_5fstruct_2eproto();  return *default_instance_;
}

AreaRuleProto* AreaRuleProto::default_instance_ = NULL;

AreaRuleProto* AreaRuleProto::New() const {
  return new AreaRuleProto;
}

void AreaRuleProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    color_ = 0;
    if (has_border()) {
      if (border_ != NULL) border_->::LineRuleProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AreaRuleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 color = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_border;
        break;
      }
      
      // optional .LineRuleProto border = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_border:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_border()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AreaRuleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 color = 1;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->color(), output);
  }
  
  // optional .LineRuleProto border = 2;
  if (has_border()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->border(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AreaRuleProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 color = 1;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->color(), target);
  }

  // optional .LineRuleProto border = 2;
  if (has_border()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->border(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AreaRuleProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }
    
    // optional .LineRuleProto border = 2;
    if (has_border()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->border());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AreaRuleProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AreaRuleProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AreaRuleProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AreaRuleProto::MergeFrom(const AreaRuleProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_border()) {
      mutable_border()->::LineRuleProto::MergeFrom(from.border());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AreaRuleProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AreaRuleProto::CopyFrom(const AreaRuleProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AreaRuleProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_border()) {
    if (!this->border().IsInitialized()) return false;
  }
  return true;
}

void AreaRuleProto::Swap(AreaRuleProto* other) {
  if (other != this) {
    std::swap(color_, other->color_);
    std::swap(border_, other->border_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AreaRuleProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AreaRuleProto_descriptor_;
  metadata.reflection = AreaRuleProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SymbolRuleProto::kNameFieldNumber;
#endif  // !_MSC_VER

SymbolRuleProto::SymbolRuleProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SymbolRuleProto::InitAsDefaultInstance() {
}

SymbolRuleProto::SymbolRuleProto(const SymbolRuleProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SymbolRuleProto::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SymbolRuleProto::~SymbolRuleProto() {
  SharedDtor();
}

void SymbolRuleProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SymbolRuleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymbolRuleProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SymbolRuleProto_descriptor_;
}

const SymbolRuleProto& SymbolRuleProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drules_5fstruct_2eproto();  return *default_instance_;
}

SymbolRuleProto* SymbolRuleProto::default_instance_ = NULL;

SymbolRuleProto* SymbolRuleProto::New() const {
  return new SymbolRuleProto;
}

void SymbolRuleProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SymbolRuleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SymbolRuleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SymbolRuleProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SymbolRuleProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolRuleProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SymbolRuleProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SymbolRuleProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SymbolRuleProto::MergeFrom(const SymbolRuleProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SymbolRuleProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolRuleProto::CopyFrom(const SymbolRuleProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolRuleProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SymbolRuleProto::Swap(SymbolRuleProto* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SymbolRuleProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SymbolRuleProto_descriptor_;
  metadata.reflection = SymbolRuleProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CaptionRuleProto::kHeightFieldNumber;
const int CaptionRuleProto::kColorFieldNumber;
const int CaptionRuleProto::kStrokeColorFieldNumber;
#endif  // !_MSC_VER

CaptionRuleProto::CaptionRuleProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CaptionRuleProto::InitAsDefaultInstance() {
}

CaptionRuleProto::CaptionRuleProto(const CaptionRuleProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CaptionRuleProto::SharedCtor() {
  _cached_size_ = 0;
  height_ = 0;
  color_ = 0;
  stroke_color_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CaptionRuleProto::~CaptionRuleProto() {
  SharedDtor();
}

void CaptionRuleProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CaptionRuleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CaptionRuleProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaptionRuleProto_descriptor_;
}

const CaptionRuleProto& CaptionRuleProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drules_5fstruct_2eproto();  return *default_instance_;
}

CaptionRuleProto* CaptionRuleProto::default_instance_ = NULL;

CaptionRuleProto* CaptionRuleProto::New() const {
  return new CaptionRuleProto;
}

void CaptionRuleProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    height_ = 0;
    color_ = 0;
    stroke_color_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CaptionRuleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 height = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_color;
        break;
      }
      
      // optional int32 color = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stroke_color;
        break;
      }
      
      // optional int32 stroke_color = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stroke_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stroke_color_)));
          set_has_stroke_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CaptionRuleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 height = 1;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->height(), output);
  }
  
  // optional int32 color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->color(), output);
  }
  
  // optional int32 stroke_color = 3;
  if (has_stroke_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stroke_color(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CaptionRuleProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 height = 1;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->height(), target);
  }

  // optional int32 color = 2;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->color(), target);
  }

  // optional int32 stroke_color = 3;
  if (has_stroke_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stroke_color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CaptionRuleProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 height = 1;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }
    
    // optional int32 color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }
    
    // optional int32 stroke_color = 3;
    if (has_stroke_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stroke_color());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CaptionRuleProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CaptionRuleProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CaptionRuleProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CaptionRuleProto::MergeFrom(const CaptionRuleProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_stroke_color()) {
      set_stroke_color(from.stroke_color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CaptionRuleProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CaptionRuleProto::CopyFrom(const CaptionRuleProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaptionRuleProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CaptionRuleProto::Swap(CaptionRuleProto* other) {
  if (other != this) {
    std::swap(height_, other->height_);
    std::swap(color_, other->color_);
    std::swap(stroke_color_, other->stroke_color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CaptionRuleProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CaptionRuleProto_descriptor_;
  metadata.reflection = CaptionRuleProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CircleRuleProto::kRadiusFieldNumber;
const int CircleRuleProto::kColorFieldNumber;
const int CircleRuleProto::kBorderFieldNumber;
#endif  // !_MSC_VER

CircleRuleProto::CircleRuleProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CircleRuleProto::InitAsDefaultInstance() {
  border_ = const_cast< ::LineRuleProto*>(&::LineRuleProto::default_instance());
}

CircleRuleProto::CircleRuleProto(const CircleRuleProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CircleRuleProto::SharedCtor() {
  _cached_size_ = 0;
  radius_ = 0;
  color_ = 0;
  border_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CircleRuleProto::~CircleRuleProto() {
  SharedDtor();
}

void CircleRuleProto::SharedDtor() {
  if (this != default_instance_) {
    delete border_;
  }
}

void CircleRuleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CircleRuleProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CircleRuleProto_descriptor_;
}

const CircleRuleProto& CircleRuleProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drules_5fstruct_2eproto();  return *default_instance_;
}

CircleRuleProto* CircleRuleProto::default_instance_ = NULL;

CircleRuleProto* CircleRuleProto::New() const {
  return new CircleRuleProto;
}

void CircleRuleProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    radius_ = 0;
    color_ = 0;
    if (has_border()) {
      if (border_ != NULL) border_->::LineRuleProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CircleRuleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double radius = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_color;
        break;
      }
      
      // required int32 color = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_border;
        break;
      }
      
      // optional .LineRuleProto border = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_border:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_border()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CircleRuleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double radius = 1;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->radius(), output);
  }
  
  // required int32 color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->color(), output);
  }
  
  // optional .LineRuleProto border = 3;
  if (has_border()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->border(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CircleRuleProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double radius = 1;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->radius(), target);
  }

  // required int32 color = 2;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->color(), target);
  }

  // optional .LineRuleProto border = 3;
  if (has_border()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->border(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CircleRuleProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double radius = 1;
    if (has_radius()) {
      total_size += 1 + 8;
    }
    
    // required int32 color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }
    
    // optional .LineRuleProto border = 3;
    if (has_border()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->border());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CircleRuleProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CircleRuleProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CircleRuleProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CircleRuleProto::MergeFrom(const CircleRuleProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_border()) {
      mutable_border()->::LineRuleProto::MergeFrom(from.border());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CircleRuleProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CircleRuleProto::CopyFrom(const CircleRuleProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CircleRuleProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_border()) {
    if (!this->border().IsInitialized()) return false;
  }
  return true;
}

void CircleRuleProto::Swap(CircleRuleProto* other) {
  if (other != this) {
    std::swap(radius_, other->radius_);
    std::swap(color_, other->color_);
    std::swap(border_, other->border_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CircleRuleProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CircleRuleProto_descriptor_;
  metadata.reflection = CircleRuleProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DrawElementProto::kScaleFieldNumber;
const int DrawElementProto::kLinesFieldNumber;
const int DrawElementProto::kAreaFieldNumber;
const int DrawElementProto::kSymbolFieldNumber;
const int DrawElementProto::kCaptionFieldNumber;
const int DrawElementProto::kCircleFieldNumber;
#endif  // !_MSC_VER

DrawElementProto::DrawElementProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DrawElementProto::InitAsDefaultInstance() {
  area_ = const_cast< ::AreaRuleProto*>(&::AreaRuleProto::default_instance());
  symbol_ = const_cast< ::SymbolRuleProto*>(&::SymbolRuleProto::default_instance());
  caption_ = const_cast< ::CaptionRuleProto*>(&::CaptionRuleProto::default_instance());
  circle_ = const_cast< ::CircleRuleProto*>(&::CircleRuleProto::default_instance());
}

DrawElementProto::DrawElementProto(const DrawElementProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DrawElementProto::SharedCtor() {
  _cached_size_ = 0;
  scale_ = 0;
  area_ = NULL;
  symbol_ = NULL;
  caption_ = NULL;
  circle_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DrawElementProto::~DrawElementProto() {
  SharedDtor();
}

void DrawElementProto::SharedDtor() {
  if (this != default_instance_) {
    delete area_;
    delete symbol_;
    delete caption_;
    delete circle_;
  }
}

void DrawElementProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DrawElementProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrawElementProto_descriptor_;
}

const DrawElementProto& DrawElementProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drules_5fstruct_2eproto();  return *default_instance_;
}

DrawElementProto* DrawElementProto::default_instance_ = NULL;

DrawElementProto* DrawElementProto::New() const {
  return new DrawElementProto;
}

void DrawElementProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scale_ = 0;
    if (has_area()) {
      if (area_ != NULL) area_->::AreaRuleProto::Clear();
    }
    if (has_symbol()) {
      if (symbol_ != NULL) symbol_->::SymbolRuleProto::Clear();
    }
    if (has_caption()) {
      if (caption_ != NULL) caption_->::CaptionRuleProto::Clear();
    }
    if (has_circle()) {
      if (circle_ != NULL) circle_->::CircleRuleProto::Clear();
    }
  }
  lines_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DrawElementProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 scale = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lines;
        break;
      }
      
      // repeated .LineRuleProto lines = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lines()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lines;
        if (input->ExpectTag(26)) goto parse_area;
        break;
      }
      
      // optional .AreaRuleProto area = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_area()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_symbol;
        break;
      }
      
      // optional .SymbolRuleProto symbol = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_symbol()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_caption;
        break;
      }
      
      // optional .CaptionRuleProto caption = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caption()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_circle;
        break;
      }
      
      // optional .CircleRuleProto circle = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_circle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_circle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DrawElementProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 scale = 1;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->scale(), output);
  }
  
  // repeated .LineRuleProto lines = 2;
  for (int i = 0; i < this->lines_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lines(i), output);
  }
  
  // optional .AreaRuleProto area = 3;
  if (has_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->area(), output);
  }
  
  // optional .SymbolRuleProto symbol = 4;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->symbol(), output);
  }
  
  // optional .CaptionRuleProto caption = 5;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->caption(), output);
  }
  
  // optional .CircleRuleProto circle = 6;
  if (has_circle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->circle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DrawElementProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 scale = 1;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->scale(), target);
  }

  // repeated .LineRuleProto lines = 2;
  for (int i = 0; i < this->lines_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lines(i), target);
  }

  // optional .AreaRuleProto area = 3;
  if (has_area()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->area(), target);
  }

  // optional .SymbolRuleProto symbol = 4;
  if (has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->symbol(), target);
  }

  // optional .CaptionRuleProto caption = 5;
  if (has_caption()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->caption(), target);
  }

  // optional .CircleRuleProto circle = 6;
  if (has_circle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->circle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DrawElementProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 scale = 1;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scale());
    }
    
    // optional .AreaRuleProto area = 3;
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->area());
    }
    
    // optional .SymbolRuleProto symbol = 4;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->symbol());
    }
    
    // optional .CaptionRuleProto caption = 5;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->caption());
    }
    
    // optional .CircleRuleProto circle = 6;
    if (has_circle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->circle());
    }
    
  }
  // repeated .LineRuleProto lines = 2;
  total_size += 1 * this->lines_size();
  for (int i = 0; i < this->lines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lines(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DrawElementProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DrawElementProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DrawElementProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DrawElementProto::MergeFrom(const DrawElementProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  lines_.MergeFrom(from.lines_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_area()) {
      mutable_area()->::AreaRuleProto::MergeFrom(from.area());
    }
    if (from.has_symbol()) {
      mutable_symbol()->::SymbolRuleProto::MergeFrom(from.symbol());
    }
    if (from.has_caption()) {
      mutable_caption()->::CaptionRuleProto::MergeFrom(from.caption());
    }
    if (from.has_circle()) {
      mutable_circle()->::CircleRuleProto::MergeFrom(from.circle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DrawElementProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawElementProto::CopyFrom(const DrawElementProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawElementProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < lines_size(); i++) {
    if (!this->lines(i).IsInitialized()) return false;
  }
  if (has_area()) {
    if (!this->area().IsInitialized()) return false;
  }
  if (has_symbol()) {
    if (!this->symbol().IsInitialized()) return false;
  }
  if (has_caption()) {
    if (!this->caption().IsInitialized()) return false;
  }
  if (has_circle()) {
    if (!this->circle().IsInitialized()) return false;
  }
  return true;
}

void DrawElementProto::Swap(DrawElementProto* other) {
  if (other != this) {
    std::swap(scale_, other->scale_);
    lines_.Swap(&other->lines_);
    std::swap(area_, other->area_);
    std::swap(symbol_, other->symbol_);
    std::swap(caption_, other->caption_);
    std::swap(circle_, other->circle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DrawElementProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DrawElementProto_descriptor_;
  metadata.reflection = DrawElementProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClassifElementProto::kNameFieldNumber;
const int ClassifElementProto::kElementFieldNumber;
#endif  // !_MSC_VER

ClassifElementProto::ClassifElementProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClassifElementProto::InitAsDefaultInstance() {
}

ClassifElementProto::ClassifElementProto(const ClassifElementProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClassifElementProto::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClassifElementProto::~ClassifElementProto() {
  SharedDtor();
}

void ClassifElementProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ClassifElementProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClassifElementProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClassifElementProto_descriptor_;
}

const ClassifElementProto& ClassifElementProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drules_5fstruct_2eproto();  return *default_instance_;
}

ClassifElementProto* ClassifElementProto::default_instance_ = NULL;

ClassifElementProto* ClassifElementProto::New() const {
  return new ClassifElementProto;
}

void ClassifElementProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClassifElementProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_element;
        break;
      }
      
      // repeated .DrawElementProto element = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_element()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_element;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClassifElementProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // repeated .DrawElementProto element = 2;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->element(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClassifElementProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .DrawElementProto element = 2;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClassifElementProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  // repeated .DrawElementProto element = 2;
  total_size += 1 * this->element_size();
  for (int i = 0; i < this->element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClassifElementProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClassifElementProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClassifElementProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClassifElementProto::MergeFrom(const ClassifElementProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClassifElementProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassifElementProto::CopyFrom(const ClassifElementProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassifElementProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < element_size(); i++) {
    if (!this->element(i).IsInitialized()) return false;
  }
  return true;
}

void ClassifElementProto::Swap(ClassifElementProto* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClassifElementProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClassifElementProto_descriptor_;
  metadata.reflection = ClassifElementProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerProto::kContFieldNumber;
#endif  // !_MSC_VER

ContainerProto::ContainerProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerProto::InitAsDefaultInstance() {
}

ContainerProto::ContainerProto(const ContainerProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerProto::~ContainerProto() {
  SharedDtor();
}

void ContainerProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContainerProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerProto_descriptor_;
}

const ContainerProto& ContainerProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_drules_5fstruct_2eproto();  return *default_instance_;
}

ContainerProto* ContainerProto::default_instance_ = NULL;

ContainerProto* ContainerProto::New() const {
  return new ContainerProto;
}

void ContainerProto::Clear() {
  cont_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ClassifElementProto cont = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cont:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cont()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cont;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ClassifElementProto cont = 1;
  for (int i = 0; i < this->cont_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cont(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ClassifElementProto cont = 1;
  for (int i = 0; i < this->cont_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cont(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerProto::ByteSize() const {
  int total_size = 0;
  
  // repeated .ClassifElementProto cont = 1;
  total_size += 1 * this->cont_size();
  for (int i = 0; i < this->cont_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cont(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerProto::MergeFrom(const ContainerProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  cont_.MergeFrom(from.cont_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerProto::CopyFrom(const ContainerProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerProto::IsInitialized() const {
  
  for (int i = 0; i < cont_size(); i++) {
    if (!this->cont(i).IsInitialized()) return false;
  }
  return true;
}

void ContainerProto::Swap(ContainerProto* other) {
  if (other != this) {
    cont_.Swap(&other->cont_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerProto_descriptor_;
  metadata.reflection = ContainerProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
