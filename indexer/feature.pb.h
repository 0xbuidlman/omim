// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: feature.proto

#ifndef PROTOBUF_feature_2eproto__INCLUDED
#define PROTOBUF_feature_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_feature_2eproto();
void protobuf_AssignDesc_feature_2eproto();
void protobuf_ShutdownFile_feature_2eproto();

class NameProto;
class FeatureProto;

// ===================================================================

class NameProto : public ::google::protobuf::MessageLite {
 public:
  NameProto();
  virtual ~NameProto();
  
  NameProto(const NameProto& from);
  
  inline NameProto& operator=(const NameProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const NameProto& default_instance();
  
  void Swap(NameProto* other);
  
  // implements Message ----------------------------------------------
  
  NameProto* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const NameProto& from);
  void MergeFrom(const NameProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string text = 1;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 1;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  
  // optional string lang = 2;
  inline bool has_lang() const;
  inline void clear_lang();
  static const int kLangFieldNumber = 2;
  inline const ::std::string& lang() const;
  inline void set_lang(const ::std::string& value);
  inline void set_lang(const char* value);
  inline void set_lang(const char* value, size_t size);
  inline ::std::string* mutable_lang();
  
  // @@protoc_insertion_point(class_scope:NameProto)
 private:
  mutable int _cached_size_;
  
  ::std::string* text_;
  static const ::std::string _default_text_;
  ::std::string* lang_;
  static const ::std::string _default_lang_;
  friend void  protobuf_AddDesc_feature_2eproto();
  friend void protobuf_AssignDesc_feature_2eproto();
  friend void protobuf_ShutdownFile_feature_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static NameProto* default_instance_;
};
// -------------------------------------------------------------------

class FeatureProto : public ::google::protobuf::MessageLite {
 public:
  FeatureProto();
  virtual ~FeatureProto();
  
  FeatureProto(const FeatureProto& from);
  
  inline FeatureProto& operator=(const FeatureProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const FeatureProto& default_instance();
  
  void Swap(FeatureProto* other);
  
  // implements Message ----------------------------------------------
  
  FeatureProto* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FeatureProto& from);
  void MergeFrom(const FeatureProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // repeated .NameProto name = 2;
  inline int name_size() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::NameProto& name(int index) const;
  inline ::NameProto* mutable_name(int index);
  inline ::NameProto* add_name();
  inline const ::google::protobuf::RepeatedPtrField< ::NameProto >&
      name() const;
  inline ::google::protobuf::RepeatedPtrField< ::NameProto >*
      mutable_name();
  
  // repeated sint64 geometry = 3 [packed = true];
  inline int geometry_size() const;
  inline void clear_geometry();
  static const int kGeometryFieldNumber = 3;
  inline ::google::protobuf::int64 geometry(int index) const;
  inline void set_geometry(int index, ::google::protobuf::int64 value);
  inline void add_geometry(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      geometry() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_geometry();
  
  // repeated sint64 polygons = 4 [packed = true];
  inline int polygons_size() const;
  inline void clear_polygons();
  static const int kPolygonsFieldNumber = 4;
  inline ::google::protobuf::int64 polygons(int index) const;
  inline void set_polygons(int index, ::google::protobuf::int64 value);
  inline void add_polygons(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      polygons() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_polygons();
  
  // optional int32 layer = 5;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 5;
  inline ::google::protobuf::int32 layer() const;
  inline void set_layer(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:FeatureProto)
 private:
  mutable int _cached_size_;
  
  ::google::protobuf::int32 type_;
  ::google::protobuf::RepeatedPtrField< ::NameProto > name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > geometry_;
  mutable int _geometry_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > polygons_;
  mutable int _polygons_cached_byte_size_;
  ::google::protobuf::int32 layer_;
  friend void  protobuf_AddDesc_feature_2eproto();
  friend void protobuf_AssignDesc_feature_2eproto();
  friend void protobuf_ShutdownFile_feature_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static FeatureProto* default_instance_;
};
// ===================================================================


// ===================================================================

// NameProto

// optional string text = 1;
inline bool NameProto::has_text() const {
  return _has_bit(0);
}
inline void NameProto::clear_text() {
  if (text_ != &_default_text_) {
    text_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& NameProto::text() const {
  return *text_;
}
inline void NameProto::set_text(const ::std::string& value) {
  _set_bit(0);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void NameProto::set_text(const char* value) {
  _set_bit(0);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void NameProto::set_text(const char* value, size_t size) {
  _set_bit(0);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NameProto::mutable_text() {
  _set_bit(0);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  return text_;
}

// optional string lang = 2;
inline bool NameProto::has_lang() const {
  return _has_bit(1);
}
inline void NameProto::clear_lang() {
  if (lang_ != &_default_lang_) {
    lang_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& NameProto::lang() const {
  return *lang_;
}
inline void NameProto::set_lang(const ::std::string& value) {
  _set_bit(1);
  if (lang_ == &_default_lang_) {
    lang_ = new ::std::string;
  }
  lang_->assign(value);
}
inline void NameProto::set_lang(const char* value) {
  _set_bit(1);
  if (lang_ == &_default_lang_) {
    lang_ = new ::std::string;
  }
  lang_->assign(value);
}
inline void NameProto::set_lang(const char* value, size_t size) {
  _set_bit(1);
  if (lang_ == &_default_lang_) {
    lang_ = new ::std::string;
  }
  lang_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NameProto::mutable_lang() {
  _set_bit(1);
  if (lang_ == &_default_lang_) {
    lang_ = new ::std::string;
  }
  return lang_;
}

// -------------------------------------------------------------------

// FeatureProto

// required int32 type = 1;
inline bool FeatureProto::has_type() const {
  return _has_bit(0);
}
inline void FeatureProto::clear_type() {
  type_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 FeatureProto::type() const {
  return type_;
}
inline void FeatureProto::set_type(::google::protobuf::int32 value) {
  _set_bit(0);
  type_ = value;
}

// repeated .NameProto name = 2;
inline int FeatureProto::name_size() const {
  return name_.size();
}
inline void FeatureProto::clear_name() {
  name_.Clear();
}
inline const ::NameProto& FeatureProto::name(int index) const {
  return name_.Get(index);
}
inline ::NameProto* FeatureProto::mutable_name(int index) {
  return name_.Mutable(index);
}
inline ::NameProto* FeatureProto::add_name() {
  return name_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NameProto >&
FeatureProto::name() const {
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::NameProto >*
FeatureProto::mutable_name() {
  return &name_;
}

// repeated sint64 geometry = 3 [packed = true];
inline int FeatureProto::geometry_size() const {
  return geometry_.size();
}
inline void FeatureProto::clear_geometry() {
  geometry_.Clear();
}
inline ::google::protobuf::int64 FeatureProto::geometry(int index) const {
  return geometry_.Get(index);
}
inline void FeatureProto::set_geometry(int index, ::google::protobuf::int64 value) {
  geometry_.Set(index, value);
}
inline void FeatureProto::add_geometry(::google::protobuf::int64 value) {
  geometry_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
FeatureProto::geometry() const {
  return geometry_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
FeatureProto::mutable_geometry() {
  return &geometry_;
}

// repeated sint64 polygons = 4 [packed = true];
inline int FeatureProto::polygons_size() const {
  return polygons_.size();
}
inline void FeatureProto::clear_polygons() {
  polygons_.Clear();
}
inline ::google::protobuf::int64 FeatureProto::polygons(int index) const {
  return polygons_.Get(index);
}
inline void FeatureProto::set_polygons(int index, ::google::protobuf::int64 value) {
  polygons_.Set(index, value);
}
inline void FeatureProto::add_polygons(::google::protobuf::int64 value) {
  polygons_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
FeatureProto::polygons() const {
  return polygons_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
FeatureProto::mutable_polygons() {
  return &polygons_;
}

// optional int32 layer = 5;
inline bool FeatureProto::has_layer() const {
  return _has_bit(4);
}
inline void FeatureProto::clear_layer() {
  layer_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 FeatureProto::layer() const {
  return layer_;
}
inline void FeatureProto::set_layer(::google::protobuf::int32 value) {
  _set_bit(4);
  layer_ = value;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_feature_2eproto__INCLUDED
