// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drules_struct.proto

#ifndef PROTOBUF_drules_5fstruct_2eproto__INCLUDED
#define PROTOBUF_drules_5fstruct_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_drules_5fstruct_2eproto();
void protobuf_AssignDesc_drules_5fstruct_2eproto();
void protobuf_ShutdownFile_drules_5fstruct_2eproto();

class ColorProto;
class DashDotProto;
class LineRuleProto;
class AreaRuleProto;
class SymbolRuleProto;
class CaptionRuleProto;
class CircleRuleProto;
class DrawElementProto;
class ClassifElementProto;
class ContainerProto;

// ===================================================================

class ColorProto : public ::google::protobuf::MessageLite {
 public:
  ColorProto();
  virtual ~ColorProto();
  
  ColorProto(const ColorProto& from);
  
  inline ColorProto& operator=(const ColorProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const ColorProto& default_instance();
  
  void Swap(ColorProto* other);
  
  // implements Message ----------------------------------------------
  
  ColorProto* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ColorProto& from);
  void MergeFrom(const ColorProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 color = 1;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 1;
  inline ::google::protobuf::int32 color() const;
  inline void set_color(::google::protobuf::int32 value);
  
  // optional int32 opacity = 2;
  inline bool has_opacity() const;
  inline void clear_opacity();
  static const int kOpacityFieldNumber = 2;
  inline ::google::protobuf::int32 opacity() const;
  inline void set_opacity(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ColorProto)
 private:
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_opacity();
  inline void clear_has_opacity();
  
  ::google::protobuf::int32 color_;
  ::google::protobuf::int32 opacity_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_drules_5fstruct_2eproto();
  friend void protobuf_AssignDesc_drules_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_drules_5fstruct_2eproto();
  
  void InitAsDefaultInstance();
  static ColorProto* default_instance_;
};
// -------------------------------------------------------------------

class DashDotProto : public ::google::protobuf::MessageLite {
 public:
  DashDotProto();
  virtual ~DashDotProto();
  
  DashDotProto(const DashDotProto& from);
  
  inline DashDotProto& operator=(const DashDotProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const DashDotProto& default_instance();
  
  void Swap(DashDotProto* other);
  
  // implements Message ----------------------------------------------
  
  DashDotProto* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DashDotProto& from);
  void MergeFrom(const DashDotProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated double dd = 1;
  inline int dd_size() const;
  inline void clear_dd();
  static const int kDdFieldNumber = 1;
  inline double dd(int index) const;
  inline void set_dd(int index, double value);
  inline void add_dd(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      dd() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_dd();
  
  // @@protoc_insertion_point(class_scope:DashDotProto)
 private:
  
  ::google::protobuf::RepeatedField< double > dd_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_drules_5fstruct_2eproto();
  friend void protobuf_AssignDesc_drules_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_drules_5fstruct_2eproto();
  
  void InitAsDefaultInstance();
  static DashDotProto* default_instance_;
};
// -------------------------------------------------------------------

class LineRuleProto : public ::google::protobuf::MessageLite {
 public:
  LineRuleProto();
  virtual ~LineRuleProto();
  
  LineRuleProto(const LineRuleProto& from);
  
  inline LineRuleProto& operator=(const LineRuleProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const LineRuleProto& default_instance();
  
  void Swap(LineRuleProto* other);
  
  // implements Message ----------------------------------------------
  
  LineRuleProto* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LineRuleProto& from);
  void MergeFrom(const LineRuleProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double width = 1;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 1;
  inline double width() const;
  inline void set_width(double value);
  
  // required .ColorProto color = 2;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 2;
  inline const ::ColorProto& color() const;
  inline ::ColorProto* mutable_color();
  inline ::ColorProto* release_color();
  
  // optional .DashDotProto dashdot = 3;
  inline bool has_dashdot() const;
  inline void clear_dashdot();
  static const int kDashdotFieldNumber = 3;
  inline const ::DashDotProto& dashdot() const;
  inline ::DashDotProto* mutable_dashdot();
  inline ::DashDotProto* release_dashdot();
  
  // @@protoc_insertion_point(class_scope:LineRuleProto)
 private:
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_dashdot();
  inline void clear_has_dashdot();
  
  double width_;
  ::ColorProto* color_;
  ::DashDotProto* dashdot_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_drules_5fstruct_2eproto();
  friend void protobuf_AssignDesc_drules_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_drules_5fstruct_2eproto();
  
  void InitAsDefaultInstance();
  static LineRuleProto* default_instance_;
};
// -------------------------------------------------------------------

class AreaRuleProto : public ::google::protobuf::MessageLite {
 public:
  AreaRuleProto();
  virtual ~AreaRuleProto();
  
  AreaRuleProto(const AreaRuleProto& from);
  
  inline AreaRuleProto& operator=(const AreaRuleProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const AreaRuleProto& default_instance();
  
  void Swap(AreaRuleProto* other);
  
  // implements Message ----------------------------------------------
  
  AreaRuleProto* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AreaRuleProto& from);
  void MergeFrom(const AreaRuleProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .ColorProto color = 1;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 1;
  inline const ::ColorProto& color() const;
  inline ::ColorProto* mutable_color();
  inline ::ColorProto* release_color();
  
  // optional .LineRuleProto border = 2;
  inline bool has_border() const;
  inline void clear_border();
  static const int kBorderFieldNumber = 2;
  inline const ::LineRuleProto& border() const;
  inline ::LineRuleProto* mutable_border();
  inline ::LineRuleProto* release_border();
  
  // @@protoc_insertion_point(class_scope:AreaRuleProto)
 private:
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_border();
  inline void clear_has_border();
  
  ::ColorProto* color_;
  ::LineRuleProto* border_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_drules_5fstruct_2eproto();
  friend void protobuf_AssignDesc_drules_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_drules_5fstruct_2eproto();
  
  void InitAsDefaultInstance();
  static AreaRuleProto* default_instance_;
};
// -------------------------------------------------------------------

class SymbolRuleProto : public ::google::protobuf::MessageLite {
 public:
  SymbolRuleProto();
  virtual ~SymbolRuleProto();
  
  SymbolRuleProto(const SymbolRuleProto& from);
  
  inline SymbolRuleProto& operator=(const SymbolRuleProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const SymbolRuleProto& default_instance();
  
  void Swap(SymbolRuleProto* other);
  
  // implements Message ----------------------------------------------
  
  SymbolRuleProto* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SymbolRuleProto& from);
  void MergeFrom(const SymbolRuleProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:SymbolRuleProto)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  
  ::std::string* name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_drules_5fstruct_2eproto();
  friend void protobuf_AssignDesc_drules_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_drules_5fstruct_2eproto();
  
  void InitAsDefaultInstance();
  static SymbolRuleProto* default_instance_;
};
// -------------------------------------------------------------------

class CaptionRuleProto : public ::google::protobuf::MessageLite {
 public:
  CaptionRuleProto();
  virtual ~CaptionRuleProto();
  
  CaptionRuleProto(const CaptionRuleProto& from);
  
  inline CaptionRuleProto& operator=(const CaptionRuleProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const CaptionRuleProto& default_instance();
  
  void Swap(CaptionRuleProto* other);
  
  // implements Message ----------------------------------------------
  
  CaptionRuleProto* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CaptionRuleProto& from);
  void MergeFrom(const CaptionRuleProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 height = 1;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 1;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);
  
  // optional .ColorProto color = 2;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 2;
  inline const ::ColorProto& color() const;
  inline ::ColorProto* mutable_color();
  inline ::ColorProto* release_color();
  
  // optional .ColorProto stroke_color = 3;
  inline bool has_stroke_color() const;
  inline void clear_stroke_color();
  static const int kStrokeColorFieldNumber = 3;
  inline const ::ColorProto& stroke_color() const;
  inline ::ColorProto* mutable_stroke_color();
  inline ::ColorProto* release_stroke_color();
  
  // @@protoc_insertion_point(class_scope:CaptionRuleProto)
 private:
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_stroke_color();
  inline void clear_has_stroke_color();
  
  ::ColorProto* color_;
  ::ColorProto* stroke_color_;
  ::google::protobuf::int32 height_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_drules_5fstruct_2eproto();
  friend void protobuf_AssignDesc_drules_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_drules_5fstruct_2eproto();
  
  void InitAsDefaultInstance();
  static CaptionRuleProto* default_instance_;
};
// -------------------------------------------------------------------

class CircleRuleProto : public ::google::protobuf::MessageLite {
 public:
  CircleRuleProto();
  virtual ~CircleRuleProto();
  
  CircleRuleProto(const CircleRuleProto& from);
  
  inline CircleRuleProto& operator=(const CircleRuleProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const CircleRuleProto& default_instance();
  
  void Swap(CircleRuleProto* other);
  
  // implements Message ----------------------------------------------
  
  CircleRuleProto* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CircleRuleProto& from);
  void MergeFrom(const CircleRuleProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double rad = 1;
  inline bool has_rad() const;
  inline void clear_rad();
  static const int kRadFieldNumber = 1;
  inline double rad() const;
  inline void set_rad(double value);
  
  // required .ColorProto color = 2;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 2;
  inline const ::ColorProto& color() const;
  inline ::ColorProto* mutable_color();
  inline ::ColorProto* release_color();
  
  // optional .LineRuleProto border = 3;
  inline bool has_border() const;
  inline void clear_border();
  static const int kBorderFieldNumber = 3;
  inline const ::LineRuleProto& border() const;
  inline ::LineRuleProto* mutable_border();
  inline ::LineRuleProto* release_border();
  
  // @@protoc_insertion_point(class_scope:CircleRuleProto)
 private:
  inline void set_has_rad();
  inline void clear_has_rad();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_border();
  inline void clear_has_border();
  
  double rad_;
  ::ColorProto* color_;
  ::LineRuleProto* border_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_drules_5fstruct_2eproto();
  friend void protobuf_AssignDesc_drules_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_drules_5fstruct_2eproto();
  
  void InitAsDefaultInstance();
  static CircleRuleProto* default_instance_;
};
// -------------------------------------------------------------------

class DrawElementProto : public ::google::protobuf::MessageLite {
 public:
  DrawElementProto();
  virtual ~DrawElementProto();
  
  DrawElementProto(const DrawElementProto& from);
  
  inline DrawElementProto& operator=(const DrawElementProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const DrawElementProto& default_instance();
  
  void Swap(DrawElementProto* other);
  
  // implements Message ----------------------------------------------
  
  DrawElementProto* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DrawElementProto& from);
  void MergeFrom(const DrawElementProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 scale = 1;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 1;
  inline ::google::protobuf::int32 scale() const;
  inline void set_scale(::google::protobuf::int32 value);
  
  // repeated .LineRuleProto lines = 2;
  inline int lines_size() const;
  inline void clear_lines();
  static const int kLinesFieldNumber = 2;
  inline const ::LineRuleProto& lines(int index) const;
  inline ::LineRuleProto* mutable_lines(int index);
  inline ::LineRuleProto* add_lines();
  inline const ::google::protobuf::RepeatedPtrField< ::LineRuleProto >&
      lines() const;
  inline ::google::protobuf::RepeatedPtrField< ::LineRuleProto >*
      mutable_lines();
  
  // optional .AreaRuleProto area = 3;
  inline bool has_area() const;
  inline void clear_area();
  static const int kAreaFieldNumber = 3;
  inline const ::AreaRuleProto& area() const;
  inline ::AreaRuleProto* mutable_area();
  inline ::AreaRuleProto* release_area();
  
  // optional .SymbolRuleProto sym = 4;
  inline bool has_sym() const;
  inline void clear_sym();
  static const int kSymFieldNumber = 4;
  inline const ::SymbolRuleProto& sym() const;
  inline ::SymbolRuleProto* mutable_sym();
  inline ::SymbolRuleProto* release_sym();
  
  // optional .CaptionRuleProto cap = 5;
  inline bool has_cap() const;
  inline void clear_cap();
  static const int kCapFieldNumber = 5;
  inline const ::CaptionRuleProto& cap() const;
  inline ::CaptionRuleProto* mutable_cap();
  inline ::CaptionRuleProto* release_cap();
  
  // optional .CircleRuleProto cir = 6;
  inline bool has_cir() const;
  inline void clear_cir();
  static const int kCirFieldNumber = 6;
  inline const ::CircleRuleProto& cir() const;
  inline ::CircleRuleProto* mutable_cir();
  inline ::CircleRuleProto* release_cir();
  
  // @@protoc_insertion_point(class_scope:DrawElementProto)
 private:
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_area();
  inline void clear_has_area();
  inline void set_has_sym();
  inline void clear_has_sym();
  inline void set_has_cap();
  inline void clear_has_cap();
  inline void set_has_cir();
  inline void clear_has_cir();
  
  ::google::protobuf::RepeatedPtrField< ::LineRuleProto > lines_;
  ::AreaRuleProto* area_;
  ::SymbolRuleProto* sym_;
  ::CaptionRuleProto* cap_;
  ::CircleRuleProto* cir_;
  ::google::protobuf::int32 scale_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_drules_5fstruct_2eproto();
  friend void protobuf_AssignDesc_drules_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_drules_5fstruct_2eproto();
  
  void InitAsDefaultInstance();
  static DrawElementProto* default_instance_;
};
// -------------------------------------------------------------------

class ClassifElementProto : public ::google::protobuf::MessageLite {
 public:
  ClassifElementProto();
  virtual ~ClassifElementProto();
  
  ClassifElementProto(const ClassifElementProto& from);
  
  inline ClassifElementProto& operator=(const ClassifElementProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const ClassifElementProto& default_instance();
  
  void Swap(ClassifElementProto* other);
  
  // implements Message ----------------------------------------------
  
  ClassifElementProto* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ClassifElementProto& from);
  void MergeFrom(const ClassifElementProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // repeated .DrawElementProto lines = 2;
  inline int lines_size() const;
  inline void clear_lines();
  static const int kLinesFieldNumber = 2;
  inline const ::DrawElementProto& lines(int index) const;
  inline ::DrawElementProto* mutable_lines(int index);
  inline ::DrawElementProto* add_lines();
  inline const ::google::protobuf::RepeatedPtrField< ::DrawElementProto >&
      lines() const;
  inline ::google::protobuf::RepeatedPtrField< ::DrawElementProto >*
      mutable_lines();
  
  // @@protoc_insertion_point(class_scope:ClassifElementProto)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::DrawElementProto > lines_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_drules_5fstruct_2eproto();
  friend void protobuf_AssignDesc_drules_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_drules_5fstruct_2eproto();
  
  void InitAsDefaultInstance();
  static ClassifElementProto* default_instance_;
};
// -------------------------------------------------------------------

class ContainerProto : public ::google::protobuf::MessageLite {
 public:
  ContainerProto();
  virtual ~ContainerProto();
  
  ContainerProto(const ContainerProto& from);
  
  inline ContainerProto& operator=(const ContainerProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const ContainerProto& default_instance();
  
  void Swap(ContainerProto* other);
  
  // implements Message ----------------------------------------------
  
  ContainerProto* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ContainerProto& from);
  void MergeFrom(const ContainerProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ClassifElementProto cont = 1;
  inline int cont_size() const;
  inline void clear_cont();
  static const int kContFieldNumber = 1;
  inline const ::ClassifElementProto& cont(int index) const;
  inline ::ClassifElementProto* mutable_cont(int index);
  inline ::ClassifElementProto* add_cont();
  inline const ::google::protobuf::RepeatedPtrField< ::ClassifElementProto >&
      cont() const;
  inline ::google::protobuf::RepeatedPtrField< ::ClassifElementProto >*
      mutable_cont();
  
  // @@protoc_insertion_point(class_scope:ContainerProto)
 private:
  
  ::google::protobuf::RepeatedPtrField< ::ClassifElementProto > cont_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_drules_5fstruct_2eproto();
  friend void protobuf_AssignDesc_drules_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_drules_5fstruct_2eproto();
  
  void InitAsDefaultInstance();
  static ContainerProto* default_instance_;
};
// ===================================================================


// ===================================================================

// ColorProto

// required int32 color = 1;
inline bool ColorProto::has_color() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ColorProto::set_has_color() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ColorProto::clear_has_color() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ColorProto::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 ColorProto::color() const {
  return color_;
}
inline void ColorProto::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
}

// optional int32 opacity = 2;
inline bool ColorProto::has_opacity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ColorProto::set_has_opacity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ColorProto::clear_has_opacity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ColorProto::clear_opacity() {
  opacity_ = 0;
  clear_has_opacity();
}
inline ::google::protobuf::int32 ColorProto::opacity() const {
  return opacity_;
}
inline void ColorProto::set_opacity(::google::protobuf::int32 value) {
  set_has_opacity();
  opacity_ = value;
}

// -------------------------------------------------------------------

// DashDotProto

// repeated double dd = 1;
inline int DashDotProto::dd_size() const {
  return dd_.size();
}
inline void DashDotProto::clear_dd() {
  dd_.Clear();
}
inline double DashDotProto::dd(int index) const {
  return dd_.Get(index);
}
inline void DashDotProto::set_dd(int index, double value) {
  dd_.Set(index, value);
}
inline void DashDotProto::add_dd(double value) {
  dd_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
DashDotProto::dd() const {
  return dd_;
}
inline ::google::protobuf::RepeatedField< double >*
DashDotProto::mutable_dd() {
  return &dd_;
}

// -------------------------------------------------------------------

// LineRuleProto

// required double width = 1;
inline bool LineRuleProto::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LineRuleProto::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LineRuleProto::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LineRuleProto::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline double LineRuleProto::width() const {
  return width_;
}
inline void LineRuleProto::set_width(double value) {
  set_has_width();
  width_ = value;
}

// required .ColorProto color = 2;
inline bool LineRuleProto::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LineRuleProto::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LineRuleProto::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LineRuleProto::clear_color() {
  if (color_ != NULL) color_->::ColorProto::Clear();
  clear_has_color();
}
inline const ::ColorProto& LineRuleProto::color() const {
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
inline ::ColorProto* LineRuleProto::mutable_color() {
  set_has_color();
  if (color_ == NULL) color_ = new ::ColorProto;
  return color_;
}
inline ::ColorProto* LineRuleProto::release_color() {
  clear_has_color();
  ::ColorProto* temp = color_;
  color_ = NULL;
  return temp;
}

// optional .DashDotProto dashdot = 3;
inline bool LineRuleProto::has_dashdot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LineRuleProto::set_has_dashdot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LineRuleProto::clear_has_dashdot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LineRuleProto::clear_dashdot() {
  if (dashdot_ != NULL) dashdot_->::DashDotProto::Clear();
  clear_has_dashdot();
}
inline const ::DashDotProto& LineRuleProto::dashdot() const {
  return dashdot_ != NULL ? *dashdot_ : *default_instance_->dashdot_;
}
inline ::DashDotProto* LineRuleProto::mutable_dashdot() {
  set_has_dashdot();
  if (dashdot_ == NULL) dashdot_ = new ::DashDotProto;
  return dashdot_;
}
inline ::DashDotProto* LineRuleProto::release_dashdot() {
  clear_has_dashdot();
  ::DashDotProto* temp = dashdot_;
  dashdot_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// AreaRuleProto

// required .ColorProto color = 1;
inline bool AreaRuleProto::has_color() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AreaRuleProto::set_has_color() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AreaRuleProto::clear_has_color() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AreaRuleProto::clear_color() {
  if (color_ != NULL) color_->::ColorProto::Clear();
  clear_has_color();
}
inline const ::ColorProto& AreaRuleProto::color() const {
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
inline ::ColorProto* AreaRuleProto::mutable_color() {
  set_has_color();
  if (color_ == NULL) color_ = new ::ColorProto;
  return color_;
}
inline ::ColorProto* AreaRuleProto::release_color() {
  clear_has_color();
  ::ColorProto* temp = color_;
  color_ = NULL;
  return temp;
}

// optional .LineRuleProto border = 2;
inline bool AreaRuleProto::has_border() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AreaRuleProto::set_has_border() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AreaRuleProto::clear_has_border() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AreaRuleProto::clear_border() {
  if (border_ != NULL) border_->::LineRuleProto::Clear();
  clear_has_border();
}
inline const ::LineRuleProto& AreaRuleProto::border() const {
  return border_ != NULL ? *border_ : *default_instance_->border_;
}
inline ::LineRuleProto* AreaRuleProto::mutable_border() {
  set_has_border();
  if (border_ == NULL) border_ = new ::LineRuleProto;
  return border_;
}
inline ::LineRuleProto* AreaRuleProto::release_border() {
  clear_has_border();
  ::LineRuleProto* temp = border_;
  border_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// SymbolRuleProto

// required string name = 1;
inline bool SymbolRuleProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SymbolRuleProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SymbolRuleProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SymbolRuleProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SymbolRuleProto::name() const {
  return *name_;
}
inline void SymbolRuleProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SymbolRuleProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SymbolRuleProto::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SymbolRuleProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SymbolRuleProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CaptionRuleProto

// required int32 height = 1;
inline bool CaptionRuleProto::has_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CaptionRuleProto::set_has_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CaptionRuleProto::clear_has_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CaptionRuleProto::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 CaptionRuleProto::height() const {
  return height_;
}
inline void CaptionRuleProto::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// optional .ColorProto color = 2;
inline bool CaptionRuleProto::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CaptionRuleProto::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CaptionRuleProto::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CaptionRuleProto::clear_color() {
  if (color_ != NULL) color_->::ColorProto::Clear();
  clear_has_color();
}
inline const ::ColorProto& CaptionRuleProto::color() const {
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
inline ::ColorProto* CaptionRuleProto::mutable_color() {
  set_has_color();
  if (color_ == NULL) color_ = new ::ColorProto;
  return color_;
}
inline ::ColorProto* CaptionRuleProto::release_color() {
  clear_has_color();
  ::ColorProto* temp = color_;
  color_ = NULL;
  return temp;
}

// optional .ColorProto stroke_color = 3;
inline bool CaptionRuleProto::has_stroke_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CaptionRuleProto::set_has_stroke_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CaptionRuleProto::clear_has_stroke_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CaptionRuleProto::clear_stroke_color() {
  if (stroke_color_ != NULL) stroke_color_->::ColorProto::Clear();
  clear_has_stroke_color();
}
inline const ::ColorProto& CaptionRuleProto::stroke_color() const {
  return stroke_color_ != NULL ? *stroke_color_ : *default_instance_->stroke_color_;
}
inline ::ColorProto* CaptionRuleProto::mutable_stroke_color() {
  set_has_stroke_color();
  if (stroke_color_ == NULL) stroke_color_ = new ::ColorProto;
  return stroke_color_;
}
inline ::ColorProto* CaptionRuleProto::release_stroke_color() {
  clear_has_stroke_color();
  ::ColorProto* temp = stroke_color_;
  stroke_color_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CircleRuleProto

// required double rad = 1;
inline bool CircleRuleProto::has_rad() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CircleRuleProto::set_has_rad() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CircleRuleProto::clear_has_rad() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CircleRuleProto::clear_rad() {
  rad_ = 0;
  clear_has_rad();
}
inline double CircleRuleProto::rad() const {
  return rad_;
}
inline void CircleRuleProto::set_rad(double value) {
  set_has_rad();
  rad_ = value;
}

// required .ColorProto color = 2;
inline bool CircleRuleProto::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CircleRuleProto::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CircleRuleProto::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CircleRuleProto::clear_color() {
  if (color_ != NULL) color_->::ColorProto::Clear();
  clear_has_color();
}
inline const ::ColorProto& CircleRuleProto::color() const {
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
inline ::ColorProto* CircleRuleProto::mutable_color() {
  set_has_color();
  if (color_ == NULL) color_ = new ::ColorProto;
  return color_;
}
inline ::ColorProto* CircleRuleProto::release_color() {
  clear_has_color();
  ::ColorProto* temp = color_;
  color_ = NULL;
  return temp;
}

// optional .LineRuleProto border = 3;
inline bool CircleRuleProto::has_border() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CircleRuleProto::set_has_border() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CircleRuleProto::clear_has_border() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CircleRuleProto::clear_border() {
  if (border_ != NULL) border_->::LineRuleProto::Clear();
  clear_has_border();
}
inline const ::LineRuleProto& CircleRuleProto::border() const {
  return border_ != NULL ? *border_ : *default_instance_->border_;
}
inline ::LineRuleProto* CircleRuleProto::mutable_border() {
  set_has_border();
  if (border_ == NULL) border_ = new ::LineRuleProto;
  return border_;
}
inline ::LineRuleProto* CircleRuleProto::release_border() {
  clear_has_border();
  ::LineRuleProto* temp = border_;
  border_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// DrawElementProto

// required int32 scale = 1;
inline bool DrawElementProto::has_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DrawElementProto::set_has_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DrawElementProto::clear_has_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DrawElementProto::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
inline ::google::protobuf::int32 DrawElementProto::scale() const {
  return scale_;
}
inline void DrawElementProto::set_scale(::google::protobuf::int32 value) {
  set_has_scale();
  scale_ = value;
}

// repeated .LineRuleProto lines = 2;
inline int DrawElementProto::lines_size() const {
  return lines_.size();
}
inline void DrawElementProto::clear_lines() {
  lines_.Clear();
}
inline const ::LineRuleProto& DrawElementProto::lines(int index) const {
  return lines_.Get(index);
}
inline ::LineRuleProto* DrawElementProto::mutable_lines(int index) {
  return lines_.Mutable(index);
}
inline ::LineRuleProto* DrawElementProto::add_lines() {
  return lines_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::LineRuleProto >&
DrawElementProto::lines() const {
  return lines_;
}
inline ::google::protobuf::RepeatedPtrField< ::LineRuleProto >*
DrawElementProto::mutable_lines() {
  return &lines_;
}

// optional .AreaRuleProto area = 3;
inline bool DrawElementProto::has_area() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DrawElementProto::set_has_area() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DrawElementProto::clear_has_area() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DrawElementProto::clear_area() {
  if (area_ != NULL) area_->::AreaRuleProto::Clear();
  clear_has_area();
}
inline const ::AreaRuleProto& DrawElementProto::area() const {
  return area_ != NULL ? *area_ : *default_instance_->area_;
}
inline ::AreaRuleProto* DrawElementProto::mutable_area() {
  set_has_area();
  if (area_ == NULL) area_ = new ::AreaRuleProto;
  return area_;
}
inline ::AreaRuleProto* DrawElementProto::release_area() {
  clear_has_area();
  ::AreaRuleProto* temp = area_;
  area_ = NULL;
  return temp;
}

// optional .SymbolRuleProto sym = 4;
inline bool DrawElementProto::has_sym() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DrawElementProto::set_has_sym() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DrawElementProto::clear_has_sym() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DrawElementProto::clear_sym() {
  if (sym_ != NULL) sym_->::SymbolRuleProto::Clear();
  clear_has_sym();
}
inline const ::SymbolRuleProto& DrawElementProto::sym() const {
  return sym_ != NULL ? *sym_ : *default_instance_->sym_;
}
inline ::SymbolRuleProto* DrawElementProto::mutable_sym() {
  set_has_sym();
  if (sym_ == NULL) sym_ = new ::SymbolRuleProto;
  return sym_;
}
inline ::SymbolRuleProto* DrawElementProto::release_sym() {
  clear_has_sym();
  ::SymbolRuleProto* temp = sym_;
  sym_ = NULL;
  return temp;
}

// optional .CaptionRuleProto cap = 5;
inline bool DrawElementProto::has_cap() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DrawElementProto::set_has_cap() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DrawElementProto::clear_has_cap() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DrawElementProto::clear_cap() {
  if (cap_ != NULL) cap_->::CaptionRuleProto::Clear();
  clear_has_cap();
}
inline const ::CaptionRuleProto& DrawElementProto::cap() const {
  return cap_ != NULL ? *cap_ : *default_instance_->cap_;
}
inline ::CaptionRuleProto* DrawElementProto::mutable_cap() {
  set_has_cap();
  if (cap_ == NULL) cap_ = new ::CaptionRuleProto;
  return cap_;
}
inline ::CaptionRuleProto* DrawElementProto::release_cap() {
  clear_has_cap();
  ::CaptionRuleProto* temp = cap_;
  cap_ = NULL;
  return temp;
}

// optional .CircleRuleProto cir = 6;
inline bool DrawElementProto::has_cir() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DrawElementProto::set_has_cir() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DrawElementProto::clear_has_cir() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DrawElementProto::clear_cir() {
  if (cir_ != NULL) cir_->::CircleRuleProto::Clear();
  clear_has_cir();
}
inline const ::CircleRuleProto& DrawElementProto::cir() const {
  return cir_ != NULL ? *cir_ : *default_instance_->cir_;
}
inline ::CircleRuleProto* DrawElementProto::mutable_cir() {
  set_has_cir();
  if (cir_ == NULL) cir_ = new ::CircleRuleProto;
  return cir_;
}
inline ::CircleRuleProto* DrawElementProto::release_cir() {
  clear_has_cir();
  ::CircleRuleProto* temp = cir_;
  cir_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ClassifElementProto

// required string name = 1;
inline bool ClassifElementProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClassifElementProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClassifElementProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClassifElementProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ClassifElementProto::name() const {
  return *name_;
}
inline void ClassifElementProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ClassifElementProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ClassifElementProto::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClassifElementProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ClassifElementProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .DrawElementProto lines = 2;
inline int ClassifElementProto::lines_size() const {
  return lines_.size();
}
inline void ClassifElementProto::clear_lines() {
  lines_.Clear();
}
inline const ::DrawElementProto& ClassifElementProto::lines(int index) const {
  return lines_.Get(index);
}
inline ::DrawElementProto* ClassifElementProto::mutable_lines(int index) {
  return lines_.Mutable(index);
}
inline ::DrawElementProto* ClassifElementProto::add_lines() {
  return lines_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DrawElementProto >&
ClassifElementProto::lines() const {
  return lines_;
}
inline ::google::protobuf::RepeatedPtrField< ::DrawElementProto >*
ClassifElementProto::mutable_lines() {
  return &lines_;
}

// -------------------------------------------------------------------

// ContainerProto

// repeated .ClassifElementProto cont = 1;
inline int ContainerProto::cont_size() const {
  return cont_.size();
}
inline void ContainerProto::clear_cont() {
  cont_.Clear();
}
inline const ::ClassifElementProto& ContainerProto::cont(int index) const {
  return cont_.Get(index);
}
inline ::ClassifElementProto* ContainerProto::mutable_cont(int index) {
  return cont_.Mutable(index);
}
inline ::ClassifElementProto* ContainerProto::add_cont() {
  return cont_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ClassifElementProto >&
ContainerProto::cont() const {
  return cont_;
}
inline ::google::protobuf::RepeatedPtrField< ::ClassifElementProto >*
ContainerProto::mutable_cont() {
  return &cont_;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_drules_5fstruct_2eproto__INCLUDED
