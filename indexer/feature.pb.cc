// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "feature.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_feature_2eproto() {
  delete NameProto::default_instance_;
  delete FeatureProto::default_instance_;
}

void protobuf_AddDesc_feature_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  NameProto::default_instance_ = new NameProto();
  FeatureProto::default_instance_ = new FeatureProto();
  NameProto::default_instance_->InitAsDefaultInstance();
  FeatureProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_feature_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_feature_2eproto {
  StaticDescriptorInitializer_feature_2eproto() {
    protobuf_AddDesc_feature_2eproto();
  }
} static_descriptor_initializer_feature_2eproto_;


// ===================================================================

const ::std::string NameProto::_default_text_;
const ::std::string NameProto::_default_lang_;
#ifndef _MSC_VER
const int NameProto::kTextFieldNumber;
const int NameProto::kLangFieldNumber;
#endif  // !_MSC_VER

NameProto::NameProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NameProto::InitAsDefaultInstance() {
}

NameProto::NameProto(const NameProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NameProto::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&_default_text_);
  lang_ = const_cast< ::std::string*>(&_default_lang_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NameProto::~NameProto() {
  SharedDtor();
}

void NameProto::SharedDtor() {
  if (text_ != &_default_text_) {
    delete text_;
  }
  if (lang_ != &_default_lang_) {
    delete lang_;
  }
  if (this != default_instance_) {
  }
}

void NameProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NameProto& NameProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_feature_2eproto();  return *default_instance_;
}

NameProto* NameProto::default_instance_ = NULL;

NameProto* NameProto::New() const {
  return new NameProto;
}

void NameProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (text_ != &_default_text_) {
        text_->clear();
      }
    }
    if (_has_bit(1)) {
      if (lang_ != &_default_lang_) {
        lang_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NameProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lang;
        break;
      }
      
      // optional string lang = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NameProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string text = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }
  
  // optional string lang = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->lang(), output);
  }
  
}

int NameProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
    // optional string lang = 2;
    if (has_lang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lang());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NameProto*>(&from));
}

void NameProto::MergeFrom(const NameProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_text(from.text());
    }
    if (from._has_bit(1)) {
      set_lang(from.lang());
    }
  }
}

void NameProto::CopyFrom(const NameProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameProto::IsInitialized() const {
  
  return true;
}

void NameProto::Swap(NameProto* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(lang_, other->lang_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NameProto::GetTypeName() const {
  return "NameProto";
}


// ===================================================================

#ifndef _MSC_VER
const int FeatureProto::kTypeFieldNumber;
const int FeatureProto::kNameFieldNumber;
const int FeatureProto::kGeometryFieldNumber;
const int FeatureProto::kPolygonsFieldNumber;
const int FeatureProto::kLayerFieldNumber;
#endif  // !_MSC_VER

FeatureProto::FeatureProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FeatureProto::InitAsDefaultInstance() {
}

FeatureProto::FeatureProto(const FeatureProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FeatureProto::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  layer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeatureProto::~FeatureProto() {
  SharedDtor();
}

void FeatureProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FeatureProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FeatureProto& FeatureProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_feature_2eproto();  return *default_instance_;
}

FeatureProto* FeatureProto::default_instance_ = NULL;

FeatureProto* FeatureProto::New() const {
  return new FeatureProto;
}

void FeatureProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    layer_ = 0;
  }
  name_.Clear();
  geometry_.Clear();
  polygons_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FeatureProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // repeated .NameProto name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        if (input->ExpectTag(26)) goto parse_geometry;
        break;
      }
      
      // repeated sint64 geometry = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geometry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_geometry())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 26, input, this->mutable_geometry())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_polygons;
        break;
      }
      
      // repeated sint64 polygons = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_polygons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_polygons())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 34, input, this->mutable_polygons())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_layer;
        break;
      }
      
      // optional int32 layer = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FeatureProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // repeated .NameProto name = 2;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->name(i), output);
  }
  
  // repeated sint64 geometry = 3 [packed = true];
  if (this->geometry_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_geometry_cached_byte_size_);
  }
  for (int i = 0; i < this->geometry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->geometry(i), output);
  }
  
  // repeated sint64 polygons = 4 [packed = true];
  if (this->polygons_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_polygons_cached_byte_size_);
  }
  for (int i = 0; i < this->polygons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->polygons(i), output);
  }
  
  // optional int32 layer = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->layer(), output);
  }
  
}

int FeatureProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 layer = 5;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }
    
  }
  // repeated .NameProto name = 2;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->name(i));
  }
  
  // repeated sint64 geometry = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->geometry_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->geometry(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _geometry_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated sint64 polygons = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->polygons_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->polygons(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _polygons_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FeatureProto*>(&from));
}

void FeatureProto::MergeFrom(const FeatureProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  name_.MergeFrom(from.name_);
  geometry_.MergeFrom(from.geometry_);
  polygons_.MergeFrom(from.polygons_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(4)) {
      set_layer(from.layer());
    }
  }
}

void FeatureProto::CopyFrom(const FeatureProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FeatureProto::Swap(FeatureProto* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    name_.Swap(&other->name_);
    geometry_.Swap(&other->geometry_);
    polygons_.Swap(&other->polygons_);
    std::swap(layer_, other->layer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FeatureProto::GetTypeName() const {
  return "FeatureProto";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
